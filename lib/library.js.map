{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///library.js","webpack:///webpack/bootstrap b67ff5864d0cee2f7c59","webpack:///./com/koreez/puremvc/patterns/observer/Notifier.js","webpack:///./com/koreez/puremvc/core/View.js","webpack:///./com/koreez/puremvc/core/Controller.js","webpack:///./com/koreez/puremvc/core/Model.js","webpack:///./com/koreez/puremvc/patterns/command/MacroCommand.js","webpack:///./com/koreez/puremvc/patterns/command/SimpleCommand.js","webpack:///./com/koreez/puremvc/patterns/facade/Facade.js","webpack:///./index.js","webpack:///../node_modules/eventemitter3/index.js","webpack:///./com/koreez/puremvc/patterns/command/AsyncMacroCommand.js","webpack:///./com/koreez/puremvc/patterns/command/SyncMacroCommand.js","webpack:///./com/koreez/puremvc/patterns/mediator/Mediator.js","webpack:///./com/koreez/puremvc/patterns/proxy/Proxy.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","value","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_Facade","_Facade2","obj","default","Notifier","multitonKey","facade","getFacade","notificationName","body","type","sendNotification","Error","MULTITON_MSG","getInstance","_eventemitter","_eventemitter2","View","instanceMap","has","mediatorMap","Map","observerMap","eventEmitter","initializeView","observerMethod","context","on","_eventEmitter","_len","arguments","args","Array","_key","emit","apply","concat","removeListener","mediator","getMediatorName","initializeNotifier","set","interests","listNotificationInterests","registerObserver","handleNotification","onRegister","mediatorName","removeObserver","delete","onRemove","removeView","_View","_View2","Controller","commandMap","initializeController","view","commandClassRef","commandInstance","execute","executeCommand","hasCommand","Model","proxyMap","initializeModel","proxy","getProxyName","proxyName","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_SimpleCommand2","_SimpleCommand3","MacroCommand","_SimpleCommand","_this","getPrototypeOf","subCommands","initializeMacroCommand","subCommand","push","_Notifier2","_Notifier3","SimpleCommand","_Notifier","_interopRequireDefault","_Controller","_Controller2","_Model","_Model2","Facade","initializeFacade","controller","model","registerCommand","removeCommand","registerProxy","retrieveProxy","removeProxy","hasProxy","registerMediator","retrieveMediator","removeMediator","hasMediator","notifyObservers","_view","_len2","_key2","removeModel","removeController","Proxy","Mediator","SyncMacroCommand","AsyncMacroCommand","undefined","_AsyncMacroCommand","_AsyncMacroCommand2","_SyncMacroCommand","_SyncMacroCommand2","_Mediator","_Mediator2","_Proxy","_Proxy2","PureMVC","Events","EE","fn","once","addListener","emitter","event","listener","evt","prefix","_events","_eventsCount","clearEvent","EventEmitter","eventNames","events","names","slice","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a1","a2","a3","a4","a5","len","j","removeAllListeners","off","prefixed","_asyncToGenerator","gen","Promise","resolve","reject","step","arg","info","error","done","then","err","_MacroCommand2","_MacroCommand3","_MacroCommand","_x","_ref","regeneratorRuntime","mark","_callee","ref","cmd","wrap","_context","prev","next","shift","stop","viewComponent","NAME","notification","data","setData"],"mappings":"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","file":"library.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/4/17.\nn\n\nvar _Facade = __webpack_require__(6);\n\nvar _Facade2 = _interopRequireDefault(_Facade);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A Base Notifier implementation.\n *\n * {@link puremvc.MacroCommand MacroCommand},\n * {@link puremvc.SimpleCommand SimpleCommand},\n * {@link puremvc.Mediator Mediator} and\n * {@link puremvc.Proxy Proxy}\n * all have a need to send Notifications\n *\n * The Notifier interface provides a common method called #sendNotification that\n * relieves implementation code of the necessity to actually construct\n * Notifications.\n *\n * The Notifier class, which all of the above mentioned classes\n * extend, provides an initialized reference to the\n * {@link puremvc.Facade Facade}\n * Multiton, which is required for the convienience method\n * for sending Notifications but also eases implementation as these\n * classes have frequent\n * {@link puremvc.Facade Facade} interactions\n * and usually require access to the facade anyway.\n *\n * NOTE: In the MultiCore version of the framework, there is one caveat to\n * notifiers, they cannot send notifications or reach the facade until they\n * have a valid multitonKey.\n *\n * The multitonKey is set:\n *   - on a Command when it is executed by the Controller\n *   - on a Mediator is registered with the View\n *   - on a Proxy is registered with the Model.\n *\n * @constructor\n */\nvar Notifier = function () {\n  function Notifier() {\n    _classCallCheck(this, Notifier);\n  }\n\n  _createClass(Notifier, [{\n    key: 'initializeNotifier',\n\n    /**\n     * Initialize this Notifier instance.\n     *\n     * This is how a Notifier gets its multitonKey.\n     * Calls to #sendNotification or to access the\n     * facade will fail until after this method\n     * has been called.\n     *\n     * Mediators, Commands or Proxies may override\n     * this method in order to send notifications\n     * or access the Multiton Facade instance as\n     * soon as possible. They CANNOT access the facade\n     * in their constructors, since this method will not\n     * yet have been called.\n     *\n     *\n     * @param {string} key\n     *  The Notifiers multiton key;\n     * @return {void}\n     */\n    value: function initializeNotifier(key) {\n      this.multitonKey = key;\n      this.facade = this.getFacade();\n    }\n\n    /**\n     * Create and send a Notification.\n     *\n     * Keeps us from having to construct new Notification instances in our\n     * implementation code.\n     *\n     * @param {string} notificationName\n     *  A notification name\n     * @param {Object} [body]\n     *  The body of the notification\n     * @param {string} [type]\n     *  The notification type\n     * @return {void}\n     */\n\n  }, {\n    key: 'sendNotification',\n    value: function sendNotification(notificationName, body, type) {\n      if (this.facade) {\n        this.facade.sendNotification(notificationName, body, type);\n      }\n    }\n\n    /**\n     * Retrieve the Multiton Facade instance\n     *\n     *\n     * @protected\n     * @return {puremvc.Facade}\n     */\n\n  }, {\n    key: 'getFacade',\n    value: function getFacade() {\n      if (this.multitonKey === null) {\n        throw new Error(MULTITON_MSG);\n      }\n\n      return _Facade2.default.getInstance(this.multitonKey);\n    }\n  }]);\n\n  return Notifier;\n}();\n\nexports.default = Notifier;\n\n\nvar MULTITON_MSG = 'multitonKey for this Notifier not yet initialized!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/4/17.\nn\n// import Observer from '../patterns/observer/Observer'\n\n\nvar _eventemitter = __webpack_require__(8);\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This View implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Multiton\n * Factory #getInstance method.\n *\n * @param {string} key\n * @constructor\n * @throws {Error}\n *  if instance for this Multiton key has already been constructed\n */\nvar View = function () {\n  function View(key) {\n    _classCallCheck(this, View);\n\n    if (View.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.multitonKey = key;\n    this.mediatorMap = new Map();\n    this.observerMap = new Map();\n    this.eventEmitter = new _eventemitter2.default();\n    this.initializeView();\n  }\n\n  /**\n   * View Singleton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @return {puremvc.View}\n   *  The Singleton instance of View\n   */\n\n\n  _createClass(View, [{\n    key: 'initializeView',\n\n\n    /**\n     * @protected\n     * Initialize the Singleton View instance\n     *\n     * Called automatically by the constructor, this is your opportunity to\n     * initialize the Singleton instance in your subclass without overriding the\n     * constructor\n     *\n     * @return {void}\n     */\n    value: function initializeView() {}\n\n    /**\n     * Register an Observer to be notified of Notifications with a given name\n     *\n     * @param {string} notificationName\n     *  The name of the Notifications to notify this Observer of\n     * @param {puremvc.Observer} observer\n     *  The Observer to register.\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerObserver',\n    value: function registerObserver(notificationName, observerMethod, context) {\n      this.eventEmitter.on(notificationName, observerMethod, context);\n    }\n\n    /**\n     * Notify the Observersfor a particular Notification.\n     *\n     * All previously attached Observers for this Notification's\n     * list are notified and are passed a reference to the INotification in\n     * the order in which they were registered.\n     *\n     * @param {puremvc.Notification} notification\n     *  The Notification to notify Observers of\n     * @return {void}\n     */\n\n  }, {\n    key: 'notifyObservers',\n    value: function notifyObservers(notificationName) {\n      var _eventEmitter;\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_eventEmitter = this.eventEmitter).emit.apply(_eventEmitter, [notificationName, notificationName].concat(args));\n    }\n\n    /**\n     * Remove the Observer for a given notifyContext from an observer list for\n     * a given Notification name\n     *\n     * @param {string} notificationName\n     *  Which observer list to remove from\n     * @param {Object} notifyContext\n     *  Remove the Observer with this object as its notifyContext\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeObserver',\n    value: function removeObserver(notificationName, observerMethod, context) {\n      this.eventEmitter.removeListener(notificationName, observerMethod, context);\n    }\n\n    /**\n     * Register a Mediator instance with the View.\n     *\n     * Registers the Mediator so that it can be retrieved by name,\n     * and further interrogates the Mediator for its\n     * {@link puremvc.Mediator#listNotificationInterests interests}.\n     *\n     * If the Mediator returns any Notification\n     * names to be notified about, an Observer is created encapsulating\n     * the Mediator instance's\n     * {@link puremvc.Mediator#handleNotification handleNotification}\n     * method and registering it as an Observer for all Notifications the\n     * Mediator is interested in.\n     *\n     * @param {puremvc.Mediator}\n     *  a reference to the Mediator instance\n     */\n\n  }, {\n    key: 'registerMediator',\n    value: function registerMediator(mediator) {\n      if (this.mediatorMap.has(mediator.getMediatorName())) {\n        return;\n      }\n\n      mediator.initializeNotifier(this.multitonKey);\n      // register the mediator for retrieval by name\n      this.mediatorMap.set(mediator.getMediatorName(), mediator);\n\n      // get notification interests if any\n      var interests = mediator.listNotificationInterests();\n\n      // register mediator as an observer for each notification\n      if (interests.length > 0) {\n        for (var i = 0; i < interests.length; i++) {\n          this.registerObserver(interests[i], mediator.handleNotification, mediator);\n        }\n      }\n\n      mediator.onRegister();\n    }\n\n    /**\n     * Retrieve a Mediator from the View\n     *\n     * @param {string} mediatorName\n     *  The name of the Mediator instance to retrieve\n     * @return {puremvc.Mediator}\n     *  The Mediator instance previously registered with the given mediatorName\n     */\n\n  }, {\n    key: 'retrieveMediator',\n    value: function retrieveMediator(mediatorName) {\n      return this.mediatorMap.get(mediatorName);\n    }\n\n    /**\n     * Remove a Mediator from the View.\n     *\n     * @param {string} mediatorName\n     *  Name of the Mediator instance to be removed\n     * @return {puremvc.Mediator}\n     *  The Mediator that was removed from the View\n     */\n\n  }, {\n    key: 'removeMediator',\n    value: function removeMediator(mediatorName) {\n      var mediator = this.mediatorMap.get(mediatorName);\n      if (mediator) {\n        // for every notification the mediator is interested in...\n        var interests = mediator.listNotificationInterests();\n        for (var i = 0; i < interests.length; i++) {\n          // remove the observer linking the mediator to the notification\n          // interest\n          this.removeObserver(interests[i], mediator.handleNotification, mediator);\n        }\n\n        // remove the mediator from the map\n        this.mediatorMap.delete(mediatorName);\n\n        // alert the mediator that it has been removed\n        mediator.onRemove();\n      }\n\n      return mediator;\n    }\n\n    /**\n     * Check if a Mediator is registered or not.\n     *\n     * @param {string} mediatorName\n     * @return {boolean}\n     *  Whether a Mediator is registered with the given mediatorname\n     */\n\n  }, {\n    key: 'hasMediator',\n    value: function hasMediator(mediatorName) {\n      return this.mediatorMap.has(mediatorName);\n    }\n\n    /**\n     * Remove a View instance\n     *\n     * @return {void}\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!this.instanceMap.has(key)) {\n        this.instanceMap.set(key, new View(key));\n      }\n\n      return this.instanceMap.get(key);\n    }\n  }]);\n\n  return View;\n}();\n\nView.instanceMap = new Map();\n\nView.removeView = function (key) {\n  this.instanceMap.delete(key);\n};\n\nexports.default = View;\n\n\nvar MULTITON_MSG = 'View instance for this Multiton key already constructed!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/3/17.\nn\n\nvar _View = __webpack_require__(1);\n\nvar _View2 = _interopRequireDefault(_View);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @constructor\n * This Controller implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static #getInstance factory method,\n * passing the unique key for this instance to it.\n * @param {string} key\n * @throws {Error}\n *  If instance for this Multiton key has already been constructed\n */\nvar Controller = function () {\n  function Controller(key) {\n    _classCallCheck(this, Controller);\n\n    if (Controller.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.multitonKey = key;\n    this.commandMap = new Map();\n    this.initializeController();\n  }\n\n  /**\n   * The Controllers multiton factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  A Controller's multiton key\n   * @return {puremvc.Controller}\n   *  the Multiton instance of Controller\n   */\n\n\n  _createClass(Controller, [{\n    key: 'initializeController',\n\n\n    /**\n     * @protected\n     *\n     * Initialize the multiton Controller instance.\n     *\n     * Called automatically by the constructor.\n     *\n     * Note that if you are using a subclass of View\n     * in your application, you should *also* subclass Controller\n     * and override the initializeController method in the\n     * following way.\n     *\n     * @return {void}\n     */\n    value: function initializeController() {\n      this.view = _View2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * If a SimpleCommand or MacroCommand has previously been registered to handle\n     * the given Notification then it is executed.\n     *\n     * @param {puremvc.Notification} note\n     * @return {void}\n     */\n\n  }, {\n    key: 'executeCommand',\n    value: function executeCommand(notificationName) {\n      var commandClassRef = this.commandMap.get(notificationName);\n      if (!commandClassRef) {\n        return;\n      }\n      // eslint-disable-next-line\n      var commandInstance = new commandClassRef();\n      commandInstance.initializeNotifier(this.multitonKey);\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      commandInstance.execute.apply(commandInstance, [notificationName].concat(args));\n    }\n\n    /**\n     * Register a particular SimpleCommand or MacroCommand class as the handler for\n     * a particular Notification.\n     *\n     * If an command already been registered to handle Notifications with this name,\n     * it is no longer used, the new command is used instead.\n     *\n     * The Observer for the new command is only created if this the irst time a\n     * command has been regisered for this Notification name.\n     *\n     * @param {string} notificationName\n     *  the name of the Notification\n     * @param {Function} commandClassRef\n     *  a command constructor\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerCommand',\n    value: function registerCommand(notificationName, commandClassRef) {\n      if (!this.commandMap.has(notificationName)) {\n        this.view.registerObserver(notificationName, this.executeCommand, this);\n      }\n      this.commandMap.set(notificationName, commandClassRef);\n    }\n\n    /**\n     * Check if a command is registered for a given Notification\n     *\n     * @param {string} notificationName\n     * @return {boolean}\n     *  whether a Command is currently registered for the given notificationName.\n     */\n\n  }, {\n    key: 'hasCommand',\n    value: function hasCommand(notificationName) {\n      return this.commandMap.has(notificationName);\n    }\n\n    /**\n     * Remove a previously registered command to\n     * {@link puremvc.Notification Notification}\n     * mapping.\n     *\n     * @param {string} notificationName\n     *  the name of the Notification to remove the command mapping for\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeCommand',\n    value: function removeCommand(notificationName) {\n      if (this.hasCommand(notificationName)) {\n        this.view.removeObserver(notificationName, this);\n        this.commandMap.delete(notificationName);\n      }\n    }\n\n    /**\n     * @static\n     * Remove a Controller instance.\n     *\n     * @param {string} key\n     *  multitonKey of Controller instance to remove\n     * @return {void}\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!this.instanceMap.has(key)) {\n        this.instanceMap.set(key, new Controller(key));\n      }\n\n      return this.instanceMap.get(key);\n    }\n  }, {\n    key: 'removeController',\n    value: function removeController(key) {\n      this.instanceMap.delete(key);\n    }\n  }]);\n\n  return Controller;\n}();\n\nController.instanceMap = new Map();\nexports.default = Controller;\n\n\nvar MULTITON_MSG = 'controller key for this Multiton key already constructed';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by sargis on 7/3/17.\n */\n/** A Multiton Model implementation.\n *\n * In PureMVC, the Model class provides\n * access to model objects (Proxies) by named lookup.\n *\n * The Model assumes these responsibilities:\n *\n * - Maintain a cache of {@link puremvc.Proxy Proxy}\n *   instances.\n * - Provide methods for registering, retrieving, and removing\n *   {@link puremvc.Proxy Proxy} instances.\n *\n * Your application must register\n * {@link puremvc.Proxy Proxy} instances with the Model.\n * Typically, you use a\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or\n * {@link puremvc.MacroCommand MacroCommand}\n * to create and register Proxy instances once the Facade has initialized the\n * *Core* actors.\n *\n * This Model implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the\n * {@link #getInstance static Multiton Factory method}\n * @constructor\n * @param {string} key\n *  The Models multiton key\n * @throws {Error}\n *  An error is thrown if this multitons key is already in use by another instance\n */\nvar Model = function () {\n  function Model(key) {\n    _classCallCheck(this, Model);\n\n    if (Model.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.multitonKey = key;\n    this.proxyMap = new Map();\n    this.initializeModel();\n  }\n\n  /**\n   * Model Multiton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key for the Model to retrieve\n   * @return {puremvc.Model}\n   *  the instance for this Multiton key\n   */\n\n\n  _createClass(Model, [{\n    key: 'initializeModel',\n\n\n    /**\n     * Initialize the Model instance.\n     *\n     * Called automatically by the constructor, this\n     * is your opportunity to initialize the Singleton\n     * instance in your subclass without overriding the\n     * constructor.\n     *\n     * @return void\n     */\n    value: function initializeModel() {}\n\n    /**\n     * Register a Proxy with the Model\n     * @param {puremvc.Proxy}\n     */\n\n  }, {\n    key: 'registerProxy',\n    value: function registerProxy(proxy) {\n      proxy.initializeNotifier(this.multitonKey);\n      this.proxyMap.set(proxy.getProxyName(), proxy);\n      proxy.onRegister();\n    }\n\n    /**\n     * Retrieve a Proxy from the Model\n     *\n     * @param {string} proxyName\n     * @return {puremvc.Proxy}\n     *  The Proxy instance previously registered with the provided proxyName\n     */\n\n  }, {\n    key: 'retrieveProxy',\n    value: function retrieveProxy(proxyName) {\n      return this.proxyMap.get(proxyName);\n    }\n\n    /**\n     * Check if a Proxy is registered\n     * @param {string} proxyName\n     * @return {boolean}\n     *  whether a Proxy is currently registered with the given proxyName.\n     */\n\n  }, {\n    key: 'hasProxy',\n    value: function hasProxy(proxyName) {\n      return this.proxyMap.has(proxyName);\n    }\n\n    /**\n     * Remove a Proxy from the Model.\n     *\n     * @param {string} proxyName\n     *  The name of the Proxy instance to remove\n     * @return {puremvc.Proxy}\n     *  The Proxy that was removed from the Model\n     */\n\n  }, {\n    key: 'removeProxy',\n    value: function removeProxy(proxyName) {\n      if (this.proxyMap.has(proxyName)) {\n        var proxy = this.proxyMap.get(proxyName);\n        proxy.onRemove();\n        this.proxyMap.delete(proxyName);\n        return proxy;\n      }\n      return null;\n    }\n\n    /**\n     * @static\n     * Remove a Model instance.\n     *\n     * @param {string} key\n     * @return {void}\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!this.instanceMap.has(key)) {\n        this.instanceMap.set(key, new Model(key));\n      }\n\n      return this.instanceMap.get(key);\n    }\n  }, {\n    key: 'removeModel',\n    value: function removeModel(key) {\n      this.instanceMap.delete(key);\n    }\n  }]);\n\n  return Model;\n}();\n\nModel.instanceMap = new Map();\nexports.default = Model;\n\n\nvar MULTITON_MSG = 'Model instance for this Multiton key already constructed!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SimpleCommand2 = __webpack_require__(5);\n\nvar _SimpleCommand3 = _interopRequireDefault(_SimpleCommand2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A base command implementation that executes other commands, such as\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or {@link puremvc.MacroCommand MacroCommand}\n * subclasses.\n *\n * A MacroCommand maintains an list of\n * command constructor references called *SubCommands*.\n *\n * When #execute is called, the MacroCommand\n * instantiates and calls #execute on each of its *SubCommands* in turn.\n * Each *SubCommand* will be passed a reference to the original\n * {@link puremvc.Notification Notification}\n * that was passed to the MacroCommands #execute method\n *\n * Unlike {@link puremvc.SimpleCommand SimpleCommand},\n * your subclass should not override #execute but instead, should\n * override the #initializeMacroCommand method, calling #addSubCommand once for\n * each *SubCommand* to be executed.\n *\n * If your subclass does define a constructor, be sure to call \"super\"\n *\n * @constructor\n */\nvar MacroCommand = function (_SimpleCommand) {\n  _inherits(MacroCommand, _SimpleCommand);\n\n  function MacroCommand() {\n    _classCallCheck(this, MacroCommand);\n\n    var _this = _possibleConstructorReturn(this, (MacroCommand.__proto__ || Object.getPrototypeOf(MacroCommand)).call(this));\n\n    _this.subCommands = [];\n    _this.initializeMacroCommand();\n    return _this;\n  }\n\n  /**\n   * @protected\n   * Initialize the MacroCommand.\n   *\n   * In your subclass, override this method to\n   * initialize the MacroCommand's *SubCommand*\n   * list with command class references\n   *\n   * Note that *SubCommand*s may be any command implementor,\n   * MacroCommands or SimpleCommands are both acceptable.\n   * @return {void}\n   */\n\n\n  _createClass(MacroCommand, [{\n    key: 'initializeMacroCommand',\n    value: function initializeMacroCommand() {}\n\n    /**\n     * @protected\n     * Add a *SubCommand*\n     *\n     * The *SubCommand*s will be called in First In / First Out (FIFO) order\n     * @param {Function} commandClassRef\n     *  A reference to a subclassed SimpleCommand or MacroCommand constructor\n     */\n\n  }, {\n    key: 'addSubCommand',\n    value: function addSubCommand(subCommand) {\n      this.subCommands.push(subCommand);\n    }\n  }]);\n\n  return MacroCommand;\n}(_SimpleCommand3.default);\n\nexports.default = MacroCommand;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Notifier2 = __webpack_require__(0);\n\nvar _Notifier3 = _interopRequireDefault(_Notifier2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n *\n * SimpleCommands encapsulate the business logic of your application. Your\n * subclass should override the #execute method where your business logic will\n * handle the\n * {@link puremvc.Notification Notification}\n *\n * Take a look at\n * {@link puremvc.Facade#registerCommand Facade's registerCommand}\n * or {@link puremvc.Controller#registerCommand Controllers registerCommand}\n * methods to see how to add commands to your application.\n *\n * @constructor\n */\nvar SimpleCommand = function (_Notifier) {\n  _inherits(SimpleCommand, _Notifier);\n\n  function SimpleCommand() {\n    _classCallCheck(this, SimpleCommand);\n\n    return _possibleConstructorReturn(this, (SimpleCommand.__proto__ || Object.getPrototypeOf(SimpleCommand)).apply(this, arguments));\n  }\n\n  _createClass(SimpleCommand, [{\n    key: 'execute',\n\n    /**\n     * Fulfill the use-case initiated by the given Notification\n     *\n     * In the Command Pattern, an application use-case typically begins with some\n     * user action, which results in a Notification is handled by the business logic\n     * in the #execute method of a command.\n     *\n     * @param {puremvc.Notification} notification\n     *  The notification to handle.\n     * @return {void}\n     */\n    value: function execute(notificationName) {}\n  }]);\n\n  return SimpleCommand;\n}(_Notifier3.default);\n\nexports.default = SimpleCommand;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/4/17.\nn\nvar _Controller = __webpack_require__(2);\n\nvar _Controller2 = _interopRequireDefault(_Controller);\n\nvar _Model = __webpack_require__(3);\n\nvar _Model2 = _interopRequireDefault(_Model);\n\nvar _View = __webpack_require__(1);\n\nvar _View2 = _interopRequireDefault(_View);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Facade exposes the functionality of the Controller, Model and View\n * actors to client facing code.\n *\n * This Facade implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Factory method,\n * passing the unique key for this instance to #getInstance\n *\n * @constructor\n * @param {string} key\n *  The multiton key to use to retrieve the Facade instance.\n * @throws {Error}\n *  If an attempt is made to instantiate Facade directly\n */\nvar Facade = function () {\n  function Facade(key) {\n    _classCallCheck(this, Facade);\n\n    if (Facade.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.initializeNotifier(key);\n    this.initializeFacade();\n  }\n\n  /**\n   * Facade Multiton Factory method.\n   * Note that this method will return null if supplied a\n   * null or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key use to retrieve a particular Facade instance\n   * @return {puremvc.Facade}\n   */\n\n\n  _createClass(Facade, [{\n    key: 'initializeFacade',\n\n\n    /**\n     * Initialize the Multiton Facade instance.\n     *\n     * Called automatically by the constructor. Override in your subclass to any\n     * subclass specific initializations. Be sure to call the 'super'\n     * initializeFacade method, though\n     *\n     * @protected\n     * @return {void}\n     */\n    value: function initializeFacade() {\n      this.initializeModel();\n      this.initializeController();\n      this.initializeView();\n    }\n\n    /**\n     * Initialize the {@link puremvc.Controller Controller}.\n     *\n     * Called by the #initializeFacade method.\n     *\n     * Override this method in your subclass of Facade\n     * if one or both of the following are true:\n      * - You wish to initialize a different Controller\n     * - You have\n     * {@link puremvc.SimpleCommand SimpleCommand}s\n     * or {@link puremvc.MacroCommand MacroCommand}s\n     * to register with the Controllerat startup.\n     *\n     * If you don't want to initialize a different Controller,\n     * call the 'super' initializeControlle method at the beginning of your\n     * method, then register commands.\n     *\n     * @protected\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeController',\n    value: function initializeController() {\n      if (this.controller) {\n        return;\n      }\n      this.controller = _Controller2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * @protected\n     * Initialize the {@link puremvc.Model Model};\n     *\n     * Called by the #initializeFacade method.\n     * Override this method in your subclass of Facade if one of the following are\n     * true:\n     *\n     * - You wish to initialize a different Model.\n     *\n     * - You have {@link puremvc.Proxy Proxy}s to\n     *   register with the Model that do not retrieve a reference to the Facade at\n     *   construction time.\n     *\n     * If you don't want to initialize a different Model\n     * call 'super' #initializeModel at the beginning of your method, then register\n     * Proxys.\n     *\n     * Note: This method is *rarely* overridden; in practice you are more\n     * likely to use a command to create and registerProxys with the Model>,\n     * since Proxys with mutable data will likely\n     * need to send Notifications and thus will likely want to fetch a reference to\n     * the Facade during their construction.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeModel',\n    value: function initializeModel() {\n      if (this.model) {\n        return;\n      }\n      this.model = _Model2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * @protected\n     *\n     * Initialize the {@link puremvc.View View}.\n     *\n     * Called by the #initializeFacade method.\n     *\n     * Override this method in your subclass of Facade if one or both of the\n     * following are true:\n     *\n     * - You wish to initialize a different View.\n     * - You have Observers to register with the View\n     *\n     * If you don't want to initialize a different View\n     * call 'super' #initializeView at the beginning of your\n     * method, then register Mediator instances.\n     *\n     * Note: This method is *rarely* overridden; in practice you are more\n     * likely to use a command to create and register Mediators\n     * with the View, since Mediator instances will need to send\n     * Notifications and thus will likely want to fetch a reference\n     * to the Facade during their construction.\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeView',\n    value: function initializeView() {\n      if (this.view) {\n        return;\n      }\n      this.view = _View2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * Register a command with the Controller by Notification name\n     * @param {string} notificationName\n     *  The name of the Notification to associate the command with\n     * @param {Function} commandClassRef\n     *  A reference ot the commands constructor.\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerCommand',\n    value: function registerCommand(notificationName, commandClassRef) {\n      this.controller.registerCommand(notificationName, commandClassRef);\n    }\n\n    /**\n     * Remove a previously registered command to Notification mapping from the\n     * {@link puremvc.Controller#removeCommand Controller}\n     * @param {string} notificationName\n     *  The name of the the Notification to remove from the command mapping for.\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeCommand',\n    value: function removeCommand(notificationName) {\n      this.controller.removeCommand(notificationName);\n    }\n\n    /**\n     * Check if a command is registered for a given notification.\n     *\n     * @param {string} notificationName\n     *  A Notification name\n     * @return {boolean}\n     *  Whether a comman is currently registered for the given notificationName\n     */\n\n  }, {\n    key: 'hasCommand',\n    value: function hasCommand(notificationName) {\n      return this.controller.hasCommand(notificationName);\n    }\n\n    /**\n     * Register a Proxy with the {@link puremvc.Model#registerProxy Model}\n     * by name.\n     *\n     * @param {puremvc.Proxy} proxy\n     *  The Proxy instance to be registered with the Model.\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerProxy',\n    value: function registerProxy(proxy) {\n      this.model.registerProxy(proxy);\n    }\n\n    /**\n     * Retrieve a Proxy from the Model\n     *\n     * @param {string} proxyName\n     * @return {puremvc.Proxy}\n     */\n\n  }, {\n    key: 'retrieveProxy',\n    value: function retrieveProxy(proxyName) {\n      return this.model.retrieveProxy(proxyName);\n    }\n\n    /**\n     * Remove a Proxy from the Model by name\n     * @param {string} proxyName\n     *  The name of the Proxy\n     * @return {puremvc.Proxy}\n     *  The Proxy that was removed from the Model\n     */\n\n  }, {\n    key: 'removeProxy',\n    value: function removeProxy(proxyName) {\n      if (this.model) {\n        return this.model.removeProxy(proxyName);\n      }\n      return null;\n    }\n\n    /**\n     * Check it a Proxy is registered.\n     * @param {string} proxyName\n     *  A Proxy name\n     * @return {boolean}\n     *  Whether a Proxy is currently registered with the given proxyName\n     */\n\n  }, {\n    key: 'hasProxy',\n    value: function hasProxy(proxyName) {\n      return this.model.hasProxy(proxyName);\n    }\n\n    /**\n     * Register a Mediator with with the View.\n     *\n     * @param {puremvc.Mediator} mediator\n     *  A reference to the Mediator to register\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerMediator',\n    value: function registerMediator(mediator) {\n      this.view.registerMediator(mediator);\n    }\n\n    /**\n     * Retrieve a Mediator from the View by name\n     *\n     * @param {string} mediatorName\n     *  The Mediators name\n     * @return {puremvc.Mediator}\n     *  The retrieved Mediator\n     */\n\n  }, {\n    key: 'retrieveMediator',\n    value: function retrieveMediator(mediatorName) {\n      return this.view.retrieveMediator(mediatorName);\n    }\n\n    /**\n     * Remove a Mediator from the View.\n     *\n     * @param {string} mediatorName\n     *  The name of the Mediator to remove.\n     * @return {puremvc.Mediator}\n     *  The removed Mediator\n     */\n\n  }, {\n    key: 'removeMediator',\n    value: function removeMediator(mediatorName) {\n      return this.view.removeMediator(mediatorName);\n    }\n\n    /**\n     * Check if a Mediator is registered or not.\n     *\n     * @param {string} mediatorName\n     *  A Mediator name\n     * @return {boolean}\n     *  Whether a Mediator is registered with the given mediatorName\n     */\n\n  }, {\n    key: 'hasMediator',\n    value: function hasMediator(mediatorName) {\n      return this.view.hasMediator(mediatorName);\n    }\n\n    /**\n     * Create and send a\n     * {@link puremvc.Notification Notification}\n     *\n     * Keeps us from having to construct new Notification instances in our\n     * implementation\n     *\n     * @param {string} notificationName\n     *  The name of the Notification to send\n     * @param {Object} [body]\n     *  The body of the notification\n     * @param {string} [type]\n     *  The type of the notification\n     * @return {void}\n     */\n\n  }, {\n    key: 'sendNotification',\n    value: function sendNotification(notificationName) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.notifyObservers.apply(this, [notificationName].concat(args));\n    }\n\n    /**\n     * Notify {@link puremvc.Observer Observer}s\n     *\n     * This method is left public mostly for backward compatibility, and to allow\n     * you to send custom notification classes using the facade.\n     *\n     * Usually you should just call sendNotification and pass the parameters, never\n     * having to construct the notification yourself.\n     *\n     * @param {puremvc.Notification} notification\n     *  The Notification to send\n     * @return {void}\n     */\n\n  }, {\n    key: 'notifyObservers',\n    value: function notifyObservers(notificationName) {\n      var _view;\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (_view = this.view).notifyObservers.apply(_view, [notificationName].concat(args));\n    }\n\n    /**\n     * Initialize the Facades Notifier capabilities by setting the Multiton key for\n     * this facade instance.\n     *\n     * Not called directly, but instead from the constructor when #getInstance is\n     * invoked. It is necessary to be public in order to implement Notifier\n     *\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeNotifier',\n    value: function initializeNotifier(key) {\n      this.multitonKey = key;\n    }\n\n    /**\n     * Check if a *Core* is registered or not\n     *\n     * @static\n     * @param {string} key\n     *  The multiton key for the *Core* in question\n     * @return {boolean}\n     *  Whether a *Core* is registered with the given key\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!Facade.instanceMap.has(key)) {\n        Facade.instanceMap.set(key, new Facade(key));\n      }\n\n      return Facade.instanceMap.get(key);\n    }\n  }, {\n    key: 'hasCore',\n    value: function hasCore(key) {\n      return this.instanceMap.has(key);\n    }\n\n    /**\n     * Remove a *Core*\n     *\n     * Remove the Model, View, Controller and Facade for a given key.\n     *\n     * @static\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeCore',\n    value: function removeCore(key) {\n      if (!this.instanceMap.has(key)) {\n        return;\n      }\n      _Model2.default.removeModel(key);\n      _View2.default.removeView(key);\n      _Controller2.default.removeController(key);\n      delete this.instanceMap[key];\n    }\n  }]);\n\n  return Facade;\n}();\n\nFacade.instanceMap = new Map();\nexports.default = Facade;\n\n\nvar MULTITON_MSG = 'Facade instance for this Multiton key already constructed!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Proxy = exports.Notifier = exports.Mediator = exports.Facade = exports.SimpleCommand = exports.SyncMacroCommand = exports.AsyncMacroCommand = exports.View = exports.Model = exports.Controller = undefined;\n\nvar _Controller = __webpack_require__(2);\n\nvar _Controller2 = _interopRequireDefault(_Controller);\n\nvar _Model = __webpack_require__(3);\n\nvar _Model2 = _interopRequireDefault(_Model);\n\nvar _View = __webpack_require__(1);\n\nvar _View2 = _interopRequireDefault(_View);\n\nvar _AsyncMacroCommand = __webpack_require__(9);\n\nvar _AsyncMacroCommand2 = _interopRequireDefault(_AsyncMacroCommand);\n\nvar _SyncMacroCommand = __webpack_require__(10);\n\nvar _SyncMacroCommand2 = _interopRequireDefault(_SyncMacroCommand);\n\nvar _SimpleCommand = __webpack_require__(5);\n\nvar _SimpleCommand2 = _interopRequireDefault(_SimpleCommand);\n\nvar _Facade = __webpack_require__(6);\n\nvar _Facade2 = _interopRequireDefault(_Facade);\n\nvar _Mediator = __webpack_require__(11);\n\nvar _Mediator2 = _interopRequireDefault(_Mediator);\n\nvar _Notifier = __webpack_require__(0);\n\nvar _Notifier2 = _interopRequireDefault(_Notifier);\n\nvar _Proxy = __webpack_require__(12);\n\nvar _Proxy2 = _interopRequireDefault(_Proxy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Controller = _Controller2.default;\nexports.Model = _Model2.default;\nexports.View = _View2.default;\nexports.AsyncMacroCommand = _AsyncMacroCommand2.default;\nexports.SyncMacroCommand = _SyncMacroCommand2.default;\nexports.SimpleCommand = _SimpleCommand2.default;\nexports.Facade = _Facade2.default;\nexports.Mediator = _Mediator2.default;\nexports.Notifier = _Notifier2.default;\nexports.Proxy = _Proxy2.default;\n\n\nvar PureMVC = {};\nPureMVC.Controller = _Controller2.default;\nPureMVC.Model = _Model2.default;\nPureMVC.View = _View2.default;\nPureMVC.AsyncMacroCommand = _AsyncMacroCommand2.default;\nPureMVC.SyncMacroCommand = _SyncMacroCommand2.default;\nPureMVC.SimpleCommand = _SimpleCommand2.default;\nPureMVC.Facade = _Facade2.default;\nPureMVC.Mediator = _Mediator2.default;\nPureMVC.Notifier = _Notifier2.default;\nPureMVC.Proxy = _Proxy2.default;\n\nexports.default = PureMVC;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _MacroCommand2 = __webpack_require__(4);\n\nvar _MacroCommand3 = _interopRequireDefault(_MacroCommand2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar AsyncMacroCommand = function (_MacroCommand) {\n  _inherits(AsyncMacroCommand, _MacroCommand);\n\n  function AsyncMacroCommand() {\n    _classCallCheck(this, AsyncMacroCommand);\n\n    return _possibleConstructorReturn(this, (AsyncMacroCommand.__proto__ || Object.getPrototypeOf(AsyncMacroCommand)).apply(this, arguments));\n  }\n\n  _createClass(AsyncMacroCommand, [{\n    key: 'execute',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(notificationName) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var ref, cmd;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.subCommands.length > 0)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                ref = this.subCommands.shift();\n                // eslint-disable-next-line new-cap\n\n                cmd = new ref();\n\n                cmd.initializeNotifier(this.multitonKey);\n                _context.next = 6;\n                return cmd.execute.apply(cmd, [notificationName].concat(args));\n\n              case 6:\n                _context.next = 0;\n                break;\n\n              case 8:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x) {\n        return _ref.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }]);\n\n  return AsyncMacroCommand;\n}(_MacroCommand3.default);\n\nexports.default = AsyncMacroCommand;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _MacroCommand2 = __webpack_require__(4);\n\nvar _MacroCommand3 = _interopRequireDefault(_MacroCommand2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar SyncMacroCommand = function (_MacroCommand) {\n  _inherits(SyncMacroCommand, _MacroCommand);\n\n  function SyncMacroCommand() {\n    _classCallCheck(this, SyncMacroCommand);\n\n    return _possibleConstructorReturn(this, (SyncMacroCommand.__proto__ || Object.getPrototypeOf(SyncMacroCommand)).apply(this, arguments));\n  }\n\n  _createClass(SyncMacroCommand, [{\n    key: 'execute',\n    value: function execute(notificationName) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      while (this.subCommands.length > 0) {\n        var ref = this.subCommands.shift();\n        // eslint-disable-next-line new-cap\n        var cmd = new ref();\n        cmd.initializeNotifier(this.multitonKey);\n        cmd.execute.apply(cmd, [notificationName].concat(args));\n      }\n    }\n  }]);\n\n  return SyncMacroCommand;\n}(_MacroCommand3.default);\n\nexports.default = SyncMacroCommand;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Notifier2 = __webpack_require__(0);\n\nvar _Notifier3 = _interopRequireDefault(_Notifier2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A base Mediator implementation.\n *\n * In PureMVC, Mediator classes are used to mediate communication between a view\n * component and the rest of the application.\n *\n * A Mediator should listen to its view components for events, and handle them\n * by sending notifications (to be handled by other Mediators,\n * {@link puremvc.SimpleCommand SimpleCommands}\n * or\n * {@link puremvc.MacroCommand MacroCommands})\n * or passing data from the view component directly to a\n * {@link puremvc.Proxy Proxy}, such as submitting\n * the contents of a form to a service.\n *\n * Mediators should not perform business logic, maintain state or other\n * information for its view component, or break the encapsulation of the view\n * component by manipulating the view component's children. It should only call\n * methods or set properties on the view component.\n *\n * The view component should encapsulate its own behavior and implementation by\n * exposing methods and properties that the Mediator can call without having to\n * know about the view component's children.\n *\n * @constructor\n * @param {string} [mediatorName]\n *  The Mediators name. The Mediators static #NAME value is used by default\n * @param {Object} [viewComponent]\n *  The Mediators {@link #setViewComponent viewComponent}.\n */\nvar Mediator = function (_Notifier) {\n  _inherits(Mediator, _Notifier);\n\n  function Mediator(mediatorName, viewComponent) {\n    _classCallCheck(this, Mediator);\n\n    var _this = _possibleConstructorReturn(this, (Mediator.__proto__ || Object.getPrototypeOf(Mediator)).call(this));\n\n    _this.mediatorName = mediatorName || NAME;\n    _this.viewComponent = viewComponent;\n    return _this;\n  }\n\n  /**\n   * Get the name of the Mediator\n   *\n   * @return {string}\n   *  The Mediator name\n   */\n\n\n  _createClass(Mediator, [{\n    key: 'getMediatorName',\n    value: function getMediatorName() {\n      return this.mediatorName;\n    }\n\n    /**\n     * Set the Mediators view component. This could\n     * be a HTMLElement, a bespoke UiComponent wrapper\n     * class, a MooTools Element, a jQuery result or a\n     * css selector, depending on which DOM abstraction\n     * library you are using.\n     *\n     *\n     * @param {Object} the view component\n     * @return {void}\n     */\n\n  }, {\n    key: 'setViewComponent',\n    value: function setViewComponent(viewComponent) {\n      this.viewComponent = viewComponent;\n    }\n\n    /**\n     * Get the Mediators view component.\n     *\n     * Additionally, an optional explicit getter can be\n     * be defined in the subclass that defines the\n     * view components, providing a more semantic interface\n     * to the Mediator.\n     *\n     * This is different from the AS3 implementation in\n     * the sense that no casting is required from the\n     * object supplied as the view component.\n     *\n     * @return {Object}\n     *  The view component\n     */\n\n  }, {\n    key: 'getViewComponent',\n    value: function getViewComponent() {\n      return this.viewComponent;\n    }\n\n    /**\n     * List the Notification names this Mediator is interested\n     * in being notified of.\n     *\n     * @return {Array}\n     *  The list of Notification names.\n     */\n\n  }, {\n    key: 'listNotificationInterests',\n    value: function listNotificationInterests() {\n      return [];\n    }\n\n    /**\n     * Handle Notifications.\n     *\n     * Typically this will be handled in a switch statement\n     * with one 'case' entry per Notification the Mediator\n     * is interested in\n     *\n     * @param {puremvc.Notification} notification\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleNotification',\n    value: function handleNotification(notification) {}\n\n    /**\n     * Called by the View when the Mediator is registered\n     * @return {void}\n     */\n\n  }, {\n    key: 'onRegister',\n    value: function onRegister() {}\n\n    /**\n     * Called by the View when the Mediator is removed\n     */\n\n  }, {\n    key: 'onRemove',\n    value: function onRemove() {}\n  }]);\n\n  return Mediator;\n}(_Notifier3.default);\n\nexports.default = Mediator;\n\n\nvar NAME = 'Mediator';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Notifier2 = __webpack_require__(0);\n\nvar _Notifier3 = _interopRequireDefault(_Notifier2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A base Proxy implementation.\n *\n * In PureMVC, Proxy classes are used to manage parts of the application's data\n * model.\n *\n * A Proxy might simply manage a reference to a local data object, in which case\n * interacting with it might involve setting and getting of its data in\n * synchronous fashion.\n *\n * Proxy classes are also used to encapsulate the application's interaction with\n * remote services to save or retrieve data, in which case, we adopt an\n * asyncronous idiom; setting data (or calling a method) on the Proxy and\n * listening for a\n * {@link puremvc.Notification Notification}\n * to be sent  when the Proxy has retrieved the data from the service.\n *\n *\n * @param {string} [proxyName]\n *  The Proxy's name. If none is provided, the Proxy will use its constructors\n *  NAME property.\n * @param {Object} [data]\n *  The Proxy's data object\n * @constructor\n */\nvar Proxy = function (_Notifier) {\n  _inherits(Proxy, _Notifier);\n\n  function Proxy(proxyName, data) {\n    _classCallCheck(this, Proxy);\n\n    var _this = _possibleConstructorReturn(this, (Proxy.__proto__ || Object.getPrototypeOf(Proxy)).call(this));\n\n    _this.proxyName = proxyName || NAME;\n    if (data) {\n      _this.setData(data);\n    }\n    return _this;\n  }\n\n  /**\n   * Get the Proxy's name.\n   *\n   * @return {string}\n   */\n\n\n  _createClass(Proxy, [{\n    key: 'getProxyName',\n    value: function getProxyName() {\n      return this.proxyName;\n    }\n\n    /**\n     * Set the Proxy's data object\n     *\n     * @param {Object} data\n     * @return {void}\n     */\n\n  }, {\n    key: 'setData',\n    value: function setData(data) {\n      this.data = data;\n    }\n\n    /**\n     * Get the Proxy's data object\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      return this.data;\n    }\n\n    /**\n     * Called by the {@link puremvc.Model Model} when\n     * the Proxy is registered.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'onRegister',\n    value: function onRegister() {}\n\n    /**\n     * Called by the {@link puremvc.Model Model} when\n     * the Proxy is removed.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'onRemove',\n    value: function onRemove() {}\n  }]);\n\n  return Proxy;\n}(_Notifier3.default);\n\nexports.default = Proxy;\n\n\nvar NAME = 'Proxy';\nmodule.exports = exports['default'];\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// library.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b67ff5864d0cee2f7c59","/**\n * Created by sargis on 7/4/17.\n */\nimport Facade from '../facade/Facade'\n/**\n * A Base Notifier implementation.\n *\n * {@link puremvc.MacroCommand MacroCommand},\n * {@link puremvc.SimpleCommand SimpleCommand},\n * {@link puremvc.Mediator Mediator} and\n * {@link puremvc.Proxy Proxy}\n * all have a need to send Notifications\n *\n * The Notifier interface provides a common method called #sendNotification that\n * relieves implementation code of the necessity to actually construct\n * Notifications.\n *\n * The Notifier class, which all of the above mentioned classes\n * extend, provides an initialized reference to the\n * {@link puremvc.Facade Facade}\n * Multiton, which is required for the convienience method\n * for sending Notifications but also eases implementation as these\n * classes have frequent\n * {@link puremvc.Facade Facade} interactions\n * and usually require access to the facade anyway.\n *\n * NOTE: In the MultiCore version of the framework, there is one caveat to\n * notifiers, they cannot send notifications or reach the facade until they\n * have a valid multitonKey.\n *\n * The multitonKey is set:\n *   - on a Command when it is executed by the Controller\n *   - on a Mediator is registered with the View\n *   - on a Proxy is registered with the Model.\n *\n * @constructor\n */\nexport default class Notifier {\n  /**\n   * Initialize this Notifier instance.\n   *\n   * This is how a Notifier gets its multitonKey.\n   * Calls to #sendNotification or to access the\n   * facade will fail until after this method\n   * has been called.\n   *\n   * Mediators, Commands or Proxies may override\n   * this method in order to send notifications\n   * or access the Multiton Facade instance as\n   * soon as possible. They CANNOT access the facade\n   * in their constructors, since this method will not\n   * yet have been called.\n   *\n   *\n   * @param {string} key\n   *  The Notifiers multiton key;\n   * @return {void}\n   */\n  initializeNotifier (key) {\n    this.multitonKey = key\n    this.facade = this.getFacade()\n  }\n\n  /**\n   * Create and send a Notification.\n   *\n   * Keeps us from having to construct new Notification instances in our\n   * implementation code.\n   *\n   * @param {string} notificationName\n   *  A notification name\n   * @param {Object} [body]\n   *  The body of the notification\n   * @param {string} [type]\n   *  The notification type\n   * @return {void}\n   */\n  sendNotification (notificationName, body, type) {\n    if (this.facade) {\n      this.facade.sendNotification(notificationName, body, type)\n    }\n  }\n\n  /**\n   * Retrieve the Multiton Facade instance\n   *\n   *\n   * @protected\n   * @return {puremvc.Facade}\n   */\n  getFacade () {\n    if (this.multitonKey === null) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    return Facade.getInstance(this.multitonKey)\n  }\n}\n\nconst MULTITON_MSG = 'multitonKey for this Notifier not yet initialized!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/observer/Notifier.js","/**\n * Created by sargis on 7/4/17.\n */\n\n// import Observer from '../patterns/observer/Observer'\nimport EventEmitter from 'eventemitter3'\n/**\n * This View implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Multiton\n * Factory #getInstance method.\n *\n * @param {string} key\n * @constructor\n * @throws {Error}\n *  if instance for this Multiton key has already been constructed\n */\nexport default class View {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (View.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.mediatorMap = new Map()\n    this.observerMap = new Map()\n    this.eventEmitter = new EventEmitter()\n    this.initializeView()\n  }\n\n  /**\n   * View Singleton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @return {puremvc.View}\n   *  The Singleton instance of View\n   */\n  static getInstance (key) {\n    if (!key) {\n      return null\n    }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new View(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * @protected\n   * Initialize the Singleton View instance\n   *\n   * Called automatically by the constructor, this is your opportunity to\n   * initialize the Singleton instance in your subclass without overriding the\n   * constructor\n   *\n   * @return {void}\n   */\n  initializeView () { }\n\n  /**\n   * Register an Observer to be notified of Notifications with a given name\n   *\n   * @param {string} notificationName\n   *  The name of the Notifications to notify this Observer of\n   * @param {puremvc.Observer} observer\n   *  The Observer to register.\n   * @return {void}\n   */\n  registerObserver (notificationName, observerMethod, context) {\n    this.eventEmitter.on(notificationName, observerMethod, context)\n  }\n\n  /**\n   * Notify the Observersfor a particular Notification.\n   *\n   * All previously attached Observers for this Notification's\n   * list are notified and are passed a reference to the INotification in\n   * the order in which they were registered.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to notify Observers of\n   * @return {void}\n   */\n  notifyObservers (notificationName, ...args) {\n    this.eventEmitter.emit(notificationName, notificationName, ...args)\n  }\n\n  /**\n   * Remove the Observer for a given notifyContext from an observer list for\n   * a given Notification name\n   *\n   * @param {string} notificationName\n   *  Which observer list to remove from\n   * @param {Object} notifyContext\n   *  Remove the Observer with this object as its notifyContext\n   * @return {void}\n   */\n  removeObserver (notificationName, observerMethod, context) {\n    this.eventEmitter.removeListener(notificationName, observerMethod, context)\n  }\n\n  /**\n   * Register a Mediator instance with the View.\n   *\n   * Registers the Mediator so that it can be retrieved by name,\n   * and further interrogates the Mediator for its\n   * {@link puremvc.Mediator#listNotificationInterests interests}.\n   *\n   * If the Mediator returns any Notification\n   * names to be notified about, an Observer is created encapsulating\n   * the Mediator instance's\n   * {@link puremvc.Mediator#handleNotification handleNotification}\n   * method and registering it as an Observer for all Notifications the\n   * Mediator is interested in.\n   *\n   * @param {puremvc.Mediator}\n   *  a reference to the Mediator instance\n   */\n  registerMediator (mediator) {\n    if (this.mediatorMap.has(mediator.getMediatorName())) {\n      return\n    }\n\n    mediator.initializeNotifier(this.multitonKey)\n    // register the mediator for retrieval by name\n    this.mediatorMap.set(mediator.getMediatorName(), mediator)\n\n    // get notification interests if any\n    const interests = mediator.listNotificationInterests()\n\n    // register mediator as an observer for each notification\n    if (interests.length > 0) {\n      for (let i = 0; i < interests.length; i++) {\n        this.registerObserver(\n          interests[i],\n          mediator.handleNotification,\n          mediator\n        )\n      }\n    }\n\n    mediator.onRegister()\n  }\n\n  /**\n   * Retrieve a Mediator from the View\n   *\n   * @param {string} mediatorName\n   *  The name of the Mediator instance to retrieve\n   * @return {puremvc.Mediator}\n   *  The Mediator instance previously registered with the given mediatorName\n   */\n  retrieveMediator (mediatorName) {\n    return this.mediatorMap.get(mediatorName)\n  }\n\n  /**\n   * Remove a Mediator from the View.\n   *\n   * @param {string} mediatorName\n   *  Name of the Mediator instance to be removed\n   * @return {puremvc.Mediator}\n   *  The Mediator that was removed from the View\n   */\n  removeMediator (mediatorName) {\n    const mediator = this.mediatorMap.get(mediatorName)\n    if (mediator) {\n      // for every notification the mediator is interested in...\n      const interests = mediator.listNotificationInterests()\n      for (let i = 0; i < interests.length; i++) {\n        // remove the observer linking the mediator to the notification\n        // interest\n        this.removeObserver(interests[i], mediator.handleNotification, mediator)\n      }\n\n      // remove the mediator from the map\n      this.mediatorMap.delete(mediatorName)\n\n      // alert the mediator that it has been removed\n      mediator.onRemove()\n    }\n\n    return mediator\n  }\n\n  /**\n   * Check if a Mediator is registered or not.\n   *\n   * @param {string} mediatorName\n   * @return {boolean}\n   *  Whether a Mediator is registered with the given mediatorname\n   */\n  hasMediator (mediatorName) {\n    return this.mediatorMap.has(mediatorName)\n  }\n\n  /**\n   * Remove a View instance\n   *\n   * @return {void}\n   */\n  static removeView = function (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'View instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/core/View.js","/**\n * Created by sargis on 7/3/17.\n */\nimport View from './View'\n/**\n * @constructor\n * This Controller implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static #getInstance factory method,\n * passing the unique key for this instance to it.\n * @param {string} key\n * @throws {Error}\n *  If instance for this Multiton key has already been constructed\n */\nexport default class Controller {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Controller.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.commandMap = new Map()\n    this.initializeController()\n  }\n\n  /**\n   * The Controllers multiton factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  A Controller's multiton key\n   * @return {puremvc.Controller}\n   *  the Multiton instance of Controller\n   */\n  static getInstance (key) {\n    if (!key) {\n      return null\n    }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new Controller(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * @protected\n   *\n   * Initialize the multiton Controller instance.\n   *\n   * Called automatically by the constructor.\n   *\n   * Note that if you are using a subclass of View\n   * in your application, you should *also* subclass Controller\n   * and override the initializeController method in the\n   * following way.\n   *\n   * @return {void}\n   */\n  initializeController () {\n    this.view = View.getInstance(this.multitonKey)\n  }\n\n  /**\n   * If a SimpleCommand or MacroCommand has previously been registered to handle\n   * the given Notification then it is executed.\n   *\n   * @param {puremvc.Notification} note\n   * @return {void}\n   */\n  executeCommand (notificationName, ...args) {\n    const commandClassRef = this.commandMap.get(notificationName)\n    if (!commandClassRef) {\n      return\n    }\n    // eslint-disable-next-line\n    const commandInstance = new commandClassRef()\n    commandInstance.initializeNotifier(this.multitonKey)\n    commandInstance.execute(notificationName, ...args)\n  }\n\n  /**\n   * Register a particular SimpleCommand or MacroCommand class as the handler for\n   * a particular Notification.\n   *\n   * If an command already been registered to handle Notifications with this name,\n   * it is no longer used, the new command is used instead.\n   *\n   * The Observer for the new command is only created if this the irst time a\n   * command has been regisered for this Notification name.\n   *\n   * @param {string} notificationName\n   *  the name of the Notification\n   * @param {Function} commandClassRef\n   *  a command constructor\n   * @return {void}\n   */\n  registerCommand (notificationName, commandClassRef) {\n    if (!this.commandMap.has(notificationName)) {\n      this.view.registerObserver(notificationName, this.executeCommand, this)\n    }\n    this.commandMap.set(notificationName, commandClassRef)\n  }\n\n  /**\n   * Check if a command is registered for a given Notification\n   *\n   * @param {string} notificationName\n   * @return {boolean}\n   *  whether a Command is currently registered for the given notificationName.\n   */\n  hasCommand (notificationName) {\n    return this.commandMap.has(notificationName)\n  }\n\n  /**\n   * Remove a previously registered command to\n   * {@link puremvc.Notification Notification}\n   * mapping.\n   *\n   * @param {string} notificationName\n   *  the name of the Notification to remove the command mapping for\n   * @return {void}\n   */\n  removeCommand (notificationName) {\n    if (this.hasCommand(notificationName)) {\n      this.view.removeObserver(notificationName, this)\n      this.commandMap.delete(notificationName)\n    }\n  }\n\n  /**\n   * @static\n   * Remove a Controller instance.\n   *\n   * @param {string} key\n   *  multitonKey of Controller instance to remove\n   * @return {void}\n   */\n  static removeController (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'controller key for this Multiton key already constructed'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/core/Controller.js","/**\n * Created by sargis on 7/3/17.\n */\n/** A Multiton Model implementation.\n *\n * In PureMVC, the Model class provides\n * access to model objects (Proxies) by named lookup.\n *\n * The Model assumes these responsibilities:\n *\n * - Maintain a cache of {@link puremvc.Proxy Proxy}\n *   instances.\n * - Provide methods for registering, retrieving, and removing\n *   {@link puremvc.Proxy Proxy} instances.\n *\n * Your application must register\n * {@link puremvc.Proxy Proxy} instances with the Model.\n * Typically, you use a\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or\n * {@link puremvc.MacroCommand MacroCommand}\n * to create and register Proxy instances once the Facade has initialized the\n * *Core* actors.\n *\n * This Model implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the\n * {@link #getInstance static Multiton Factory method}\n * @constructor\n * @param {string} key\n *  The Models multiton key\n * @throws {Error}\n *  An error is thrown if this multitons key is already in use by another instance\n */\nexport default class Model {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Model.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.proxyMap = new Map()\n    this.initializeModel()\n  }\n\n  /**\n   * Model Multiton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key for the Model to retrieve\n   * @return {puremvc.Model}\n   *  the instance for this Multiton key\n   */\n  static getInstance (key) {\n    if (!key) {\n      return null\n    }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new Model(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * Initialize the Model instance.\n   *\n   * Called automatically by the constructor, this\n   * is your opportunity to initialize the Singleton\n   * instance in your subclass without overriding the\n   * constructor.\n   *\n   * @return void\n   */\n  initializeModel () {}\n\n  /**\n   * Register a Proxy with the Model\n   * @param {puremvc.Proxy}\n   */\n  registerProxy (proxy) {\n    proxy.initializeNotifier(this.multitonKey)\n    this.proxyMap.set(proxy.getProxyName(), proxy)\n    proxy.onRegister()\n  }\n\n  /**\n   * Retrieve a Proxy from the Model\n   *\n   * @param {string} proxyName\n   * @return {puremvc.Proxy}\n   *  The Proxy instance previously registered with the provided proxyName\n   */\n  retrieveProxy (proxyName) {\n    return this.proxyMap.get(proxyName)\n  }\n\n  /**\n   * Check if a Proxy is registered\n   * @param {string} proxyName\n   * @return {boolean}\n   *  whether a Proxy is currently registered with the given proxyName.\n   */\n  hasProxy (proxyName) {\n    return this.proxyMap.has(proxyName)\n  }\n\n  /**\n   * Remove a Proxy from the Model.\n   *\n   * @param {string} proxyName\n   *  The name of the Proxy instance to remove\n   * @return {puremvc.Proxy}\n   *  The Proxy that was removed from the Model\n   */\n  removeProxy (proxyName) {\n    if (this.proxyMap.has(proxyName)) {\n      const proxy = this.proxyMap.get(proxyName)\n      proxy.onRemove()\n      this.proxyMap.delete(proxyName)\n      return proxy\n    }\n    return null\n  }\n\n  /**\n   * @static\n   * Remove a Model instance.\n   *\n   * @param {string} key\n   * @return {void}\n   */\n  static removeModel (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'Model instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/core/Model.js","/**\n * Created by sargis on 7/4/17.\n */\nimport SimpleCommand from './SimpleCommand'\n/**\n * A base command implementation that executes other commands, such as\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or {@link puremvc.MacroCommand MacroCommand}\n * subclasses.\n *\n * A MacroCommand maintains an list of\n * command constructor references called *SubCommands*.\n *\n * When #execute is called, the MacroCommand\n * instantiates and calls #execute on each of its *SubCommands* in turn.\n * Each *SubCommand* will be passed a reference to the original\n * {@link puremvc.Notification Notification}\n * that was passed to the MacroCommands #execute method\n *\n * Unlike {@link puremvc.SimpleCommand SimpleCommand},\n * your subclass should not override #execute but instead, should\n * override the #initializeMacroCommand method, calling #addSubCommand once for\n * each *SubCommand* to be executed.\n *\n * If your subclass does define a constructor, be sure to call \"super\"\n *\n * @constructor\n */\nexport default class MacroCommand extends SimpleCommand {\n  constructor () {\n    super()\n    this.subCommands = []\n    this.initializeMacroCommand()\n  }\n\n  /**\n   * @protected\n   * Initialize the MacroCommand.\n   *\n   * In your subclass, override this method to\n   * initialize the MacroCommand's *SubCommand*\n   * list with command class references\n   *\n   * Note that *SubCommand*s may be any command implementor,\n   * MacroCommands or SimpleCommands are both acceptable.\n   * @return {void}\n   */\n  initializeMacroCommand () { }\n\n  /**\n   * @protected\n   * Add a *SubCommand*\n   *\n   * The *SubCommand*s will be called in First In / First Out (FIFO) order\n   * @param {Function} commandClassRef\n   *  A reference to a subclassed SimpleCommand or MacroCommand constructor\n   */\n  addSubCommand (subCommand) {\n    this.subCommands.push(subCommand)\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/command/MacroCommand.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n/**\n *\n * SimpleCommands encapsulate the business logic of your application. Your\n * subclass should override the #execute method where your business logic will\n * handle the\n * {@link puremvc.Notification Notification}\n *\n * Take a look at\n * {@link puremvc.Facade#registerCommand Facade's registerCommand}\n * or {@link puremvc.Controller#registerCommand Controllers registerCommand}\n * methods to see how to add commands to your application.\n *\n * @constructor\n */\nexport default class SimpleCommand extends Notifier {\n  /**\n   * Fulfill the use-case initiated by the given Notification\n   *\n   * In the Command Pattern, an application use-case typically begins with some\n   * user action, which results in a Notification is handled by the business logic\n   * in the #execute method of a command.\n   *\n   * @param {puremvc.Notification} notification\n   *  The notification to handle.\n   * @return {void}\n   */\n  execute (notificationName, ...args) { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/command/SimpleCommand.js","/**\n * Created by sargis on 7/4/17.\n */\n\nimport Controller from '../../core/Controller'\nimport Model from '../../core/Model'\nimport View from '../../core/View'\n\n/**\n * Facade exposes the functionality of the Controller, Model and View\n * actors to client facing code.\n *\n * This Facade implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Factory method,\n * passing the unique key for this instance to #getInstance\n *\n * @constructor\n * @param {string} key\n *  The multiton key to use to retrieve the Facade instance.\n * @throws {Error}\n *  If an attempt is made to instantiate Facade directly\n */\nexport default class Facade {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Facade.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.initializeNotifier(key)\n    this.initializeFacade()\n  }\n\n  /**\n   * Facade Multiton Factory method.\n   * Note that this method will return null if supplied a\n   * null or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key use to retrieve a particular Facade instance\n   * @return {puremvc.Facade}\n   */\n  static getInstance (key) {\n    if (!key) {\n      return null\n    }\n\n    if (!Facade.instanceMap.has(key)) {\n      Facade.instanceMap.set(key, new Facade(key))\n    }\n\n    return Facade.instanceMap.get(key)\n  }\n\n  /**\n   * Initialize the Multiton Facade instance.\n   *\n   * Called automatically by the constructor. Override in your subclass to any\n   * subclass specific initializations. Be sure to call the 'super'\n   * initializeFacade method, though\n   *\n   * @protected\n   * @return {void}\n   */\n  initializeFacade () {\n    this.initializeModel()\n    this.initializeController()\n    this.initializeView()\n  }\n\n  /**\n   * Initialize the {@link puremvc.Controller Controller}.\n   *\n   * Called by the #initializeFacade method.\n   *\n   * Override this method in your subclass of Facade\n   * if one or both of the following are true:\n\n   * - You wish to initialize a different Controller\n   * - You have\n   * {@link puremvc.SimpleCommand SimpleCommand}s\n   * or {@link puremvc.MacroCommand MacroCommand}s\n   * to register with the Controllerat startup.\n   *\n   * If you don't want to initialize a different Controller,\n   * call the 'super' initializeControlle method at the beginning of your\n   * method, then register commands.\n   *\n   * @protected\n   * @return {void}\n   */\n  initializeController () {\n    if (this.controller) {\n      return\n    }\n    this.controller = Controller.getInstance(this.multitonKey)\n  }\n\n  /**\n   * @protected\n   * Initialize the {@link puremvc.Model Model};\n   *\n   * Called by the #initializeFacade method.\n   * Override this method in your subclass of Facade if one of the following are\n   * true:\n   *\n   * - You wish to initialize a different Model.\n   *\n   * - You have {@link puremvc.Proxy Proxy}s to\n   *   register with the Model that do not retrieve a reference to the Facade at\n   *   construction time.\n   *\n   * If you don't want to initialize a different Model\n   * call 'super' #initializeModel at the beginning of your method, then register\n   * Proxys.\n   *\n   * Note: This method is *rarely* overridden; in practice you are more\n   * likely to use a command to create and registerProxys with the Model>,\n   * since Proxys with mutable data will likely\n   * need to send Notifications and thus will likely want to fetch a reference to\n   * the Facade during their construction.\n   *\n   * @return {void}\n   */\n  initializeModel () {\n    if (this.model) {\n      return\n    }\n    this.model = Model.getInstance(this.multitonKey)\n  }\n\n  /**\n   * @protected\n   *\n   * Initialize the {@link puremvc.View View}.\n   *\n   * Called by the #initializeFacade method.\n   *\n   * Override this method in your subclass of Facade if one or both of the\n   * following are true:\n   *\n   * - You wish to initialize a different View.\n   * - You have Observers to register with the View\n   *\n   * If you don't want to initialize a different View\n   * call 'super' #initializeView at the beginning of your\n   * method, then register Mediator instances.\n   *\n   * Note: This method is *rarely* overridden; in practice you are more\n   * likely to use a command to create and register Mediators\n   * with the View, since Mediator instances will need to send\n   * Notifications and thus will likely want to fetch a reference\n   * to the Facade during their construction.\n   * @return {void}\n   */\n  initializeView () {\n    if (this.view) {\n      return\n    }\n    this.view = View.getInstance(this.multitonKey)\n  }\n\n  /**\n   * Register a command with the Controller by Notification name\n   * @param {string} notificationName\n   *  The name of the Notification to associate the command with\n   * @param {Function} commandClassRef\n   *  A reference ot the commands constructor.\n   * @return {void}\n   */\n  registerCommand (notificationName, commandClassRef) {\n    this.controller.registerCommand(notificationName, commandClassRef)\n  }\n\n  /**\n   * Remove a previously registered command to Notification mapping from the\n   * {@link puremvc.Controller#removeCommand Controller}\n   * @param {string} notificationName\n   *  The name of the the Notification to remove from the command mapping for.\n   * @return {void}\n   */\n  removeCommand (notificationName) {\n    this.controller.removeCommand(notificationName)\n  }\n\n  /**\n   * Check if a command is registered for a given notification.\n   *\n   * @param {string} notificationName\n   *  A Notification name\n   * @return {boolean}\n   *  Whether a comman is currently registered for the given notificationName\n   */\n  hasCommand (notificationName) {\n    return this.controller.hasCommand(notificationName)\n  }\n\n  /**\n   * Register a Proxy with the {@link puremvc.Model#registerProxy Model}\n   * by name.\n   *\n   * @param {puremvc.Proxy} proxy\n   *  The Proxy instance to be registered with the Model.\n   * @return {void}\n   */\n  registerProxy (proxy) {\n    this.model.registerProxy(proxy)\n  }\n\n  /**\n   * Retrieve a Proxy from the Model\n   *\n   * @param {string} proxyName\n   * @return {puremvc.Proxy}\n   */\n  retrieveProxy (proxyName) {\n    return this.model.retrieveProxy(proxyName)\n  }\n\n  /**\n   * Remove a Proxy from the Model by name\n   * @param {string} proxyName\n   *  The name of the Proxy\n   * @return {puremvc.Proxy}\n   *  The Proxy that was removed from the Model\n   */\n  removeProxy (proxyName) {\n    if (this.model) {\n      return this.model.removeProxy(proxyName)\n    }\n    return null\n  }\n\n  /**\n   * Check it a Proxy is registered.\n   * @param {string} proxyName\n   *  A Proxy name\n   * @return {boolean}\n   *  Whether a Proxy is currently registered with the given proxyName\n   */\n  hasProxy (proxyName) {\n    return this.model.hasProxy(proxyName)\n  }\n\n  /**\n   * Register a Mediator with with the View.\n   *\n   * @param {puremvc.Mediator} mediator\n   *  A reference to the Mediator to register\n   * @return {void}\n   */\n  registerMediator (mediator) {\n    this.view.registerMediator(mediator)\n  }\n\n  /**\n   * Retrieve a Mediator from the View by name\n   *\n   * @param {string} mediatorName\n   *  The Mediators name\n   * @return {puremvc.Mediator}\n   *  The retrieved Mediator\n   */\n  retrieveMediator (mediatorName) {\n    return this.view.retrieveMediator(mediatorName)\n  }\n\n  /**\n   * Remove a Mediator from the View.\n   *\n   * @param {string} mediatorName\n   *  The name of the Mediator to remove.\n   * @return {puremvc.Mediator}\n   *  The removed Mediator\n   */\n  removeMediator (mediatorName) {\n    return this.view.removeMediator(mediatorName)\n  }\n\n  /**\n   * Check if a Mediator is registered or not.\n   *\n   * @param {string} mediatorName\n   *  A Mediator name\n   * @return {boolean}\n   *  Whether a Mediator is registered with the given mediatorName\n   */\n  hasMediator (mediatorName) {\n    return this.view.hasMediator(mediatorName)\n  }\n\n  /**\n   * Create and send a\n   * {@link puremvc.Notification Notification}\n   *\n   * Keeps us from having to construct new Notification instances in our\n   * implementation\n   *\n   * @param {string} notificationName\n   *  The name of the Notification to send\n   * @param {Object} [body]\n   *  The body of the notification\n   * @param {string} [type]\n   *  The type of the notification\n   * @return {void}\n   */\n  sendNotification (notificationName, ...args) {\n    this.notifyObservers(notificationName, ...args)\n  }\n\n  /**\n   * Notify {@link puremvc.Observer Observer}s\n   *\n   * This method is left public mostly for backward compatibility, and to allow\n   * you to send custom notification classes using the facade.\n   *\n   * Usually you should just call sendNotification and pass the parameters, never\n   * having to construct the notification yourself.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to send\n   * @return {void}\n   */\n  notifyObservers (notificationName, ...args) {\n    this.view.notifyObservers(notificationName, ...args)\n  }\n\n  /**\n   * Initialize the Facades Notifier capabilities by setting the Multiton key for\n   * this facade instance.\n   *\n   * Not called directly, but instead from the constructor when #getInstance is\n   * invoked. It is necessary to be public in order to implement Notifier\n   *\n   * @param {string} key\n   * @return {void}\n   */\n  initializeNotifier (key) {\n    this.multitonKey = key\n  }\n\n  /**\n   * Check if a *Core* is registered or not\n   *\n   * @static\n   * @param {string} key\n   *  The multiton key for the *Core* in question\n   * @return {boolean}\n   *  Whether a *Core* is registered with the given key\n   */\n  static hasCore (key) {\n    return this.instanceMap.has(key)\n  }\n\n  /**\n   * Remove a *Core*\n   *\n   * Remove the Model, View, Controller and Facade for a given key.\n   *\n   * @static\n   * @param {string} key\n   * @return {void}\n   */\n  static removeCore (key) {\n    if (!this.instanceMap.has(key)) {\n      return\n    }\n    Model.removeModel(key)\n    View.removeView(key)\n    Controller.removeController(key)\n    delete this.instanceMap[key]\n  }\n}\n\nconst MULTITON_MSG =\n  'Facade instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/facade/Facade.js","import Controller from './com/koreez/puremvc/core/Controller'\nimport Model from './com/koreez/puremvc/core/Model'\nimport View from './com/koreez/puremvc/core/View'\nimport AsyncMacroCommand from './com/koreez/puremvc/patterns/command/AsyncMacroCommand'\nimport SyncMacroCommand from './com/koreez/puremvc/patterns/command/SyncMacroCommand'\nimport SimpleCommand from './com/koreez/puremvc/patterns/command/SimpleCommand'\nimport Facade from './com/koreez/puremvc/patterns/facade/Facade'\nimport Mediator from './com/koreez/puremvc/patterns/mediator/Mediator'\nimport Notifier from './com/koreez/puremvc/patterns/observer/Notifier'\nimport Proxy from './com/koreez/puremvc/patterns/proxy/Proxy'\n\nexport {\n  Controller,\n  Model,\n  View,\n  AsyncMacroCommand,\n  SyncMacroCommand,\n  SimpleCommand,\n  Facade,\n  Mediator,\n  Notifier,\n  Proxy,\n}\n\nconst PureMVC = {}\nPureMVC.Controller = Controller\nPureMVC.Model = Model\nPureMVC.View = View\nPureMVC.AsyncMacroCommand = AsyncMacroCommand\nPureMVC.SyncMacroCommand = SyncMacroCommand\nPureMVC.SimpleCommand = SimpleCommand\nPureMVC.Facade = Facade\nPureMVC.Mediator = Mediator\nPureMVC.Notifier = Notifier\nPureMVC.Proxy = Proxy\n\nexport default PureMVC\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/eventemitter3/index.js\n// module id = 8\n// module chunks = 0","import MacroCommand from './MacroCommand'\r\nexport default class AsyncMacroCommand extends MacroCommand {\r\n  async execute (notificationName, ...args) {\r\n    while (this.subCommands.length > 0) {\r\n      const ref = this.subCommands.shift()\r\n      // eslint-disable-next-line new-cap\r\n      const cmd = new ref()\r\n      cmd.initializeNotifier(this.multitonKey)\r\n      await cmd.execute(notificationName, ...args)\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/command/AsyncMacroCommand.js","import MacroCommand from './MacroCommand'\r\n\r\nexport default class SyncMacroCommand extends MacroCommand {\r\n  execute (notificationName, ...args) {\r\n    while (this.subCommands.length > 0) {\r\n      const ref = this.subCommands.shift()\r\n      // eslint-disable-next-line new-cap\r\n      const cmd = new ref()\r\n      cmd.initializeNotifier(this.multitonKey)\r\n      cmd.execute(notificationName, ...args)\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/command/SyncMacroCommand.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n/**\n * A base Mediator implementation.\n *\n * In PureMVC, Mediator classes are used to mediate communication between a view\n * component and the rest of the application.\n *\n * A Mediator should listen to its view components for events, and handle them\n * by sending notifications (to be handled by other Mediators,\n * {@link puremvc.SimpleCommand SimpleCommands}\n * or\n * {@link puremvc.MacroCommand MacroCommands})\n * or passing data from the view component directly to a\n * {@link puremvc.Proxy Proxy}, such as submitting\n * the contents of a form to a service.\n *\n * Mediators should not perform business logic, maintain state or other\n * information for its view component, or break the encapsulation of the view\n * component by manipulating the view component's children. It should only call\n * methods or set properties on the view component.\n *\n * The view component should encapsulate its own behavior and implementation by\n * exposing methods and properties that the Mediator can call without having to\n * know about the view component's children.\n *\n * @constructor\n * @param {string} [mediatorName]\n *  The Mediators name. The Mediators static #NAME value is used by default\n * @param {Object} [viewComponent]\n *  The Mediators {@link #setViewComponent viewComponent}.\n */\nexport default class Mediator extends Notifier {\n  constructor (mediatorName, viewComponent) {\n    super()\n    this.mediatorName = mediatorName || NAME\n    this.viewComponent = viewComponent\n  }\n\n  /**\n   * Get the name of the Mediator\n   *\n   * @return {string}\n   *  The Mediator name\n   */\n  getMediatorName () {\n    return this.mediatorName\n  }\n\n  /**\n   * Set the Mediators view component. This could\n   * be a HTMLElement, a bespoke UiComponent wrapper\n   * class, a MooTools Element, a jQuery result or a\n   * css selector, depending on which DOM abstraction\n   * library you are using.\n   *\n   *\n   * @param {Object} the view component\n   * @return {void}\n   */\n  setViewComponent (viewComponent) {\n    this.viewComponent = viewComponent\n  }\n\n  /**\n   * Get the Mediators view component.\n   *\n   * Additionally, an optional explicit getter can be\n   * be defined in the subclass that defines the\n   * view components, providing a more semantic interface\n   * to the Mediator.\n   *\n   * This is different from the AS3 implementation in\n   * the sense that no casting is required from the\n   * object supplied as the view component.\n   *\n   * @return {Object}\n   *  The view component\n   */\n  getViewComponent () {\n    return this.viewComponent\n  }\n\n  /**\n   * List the Notification names this Mediator is interested\n   * in being notified of.\n   *\n   * @return {Array}\n   *  The list of Notification names.\n   */\n  listNotificationInterests () {\n    return []\n  }\n\n  /**\n   * Handle Notifications.\n   *\n   * Typically this will be handled in a switch statement\n   * with one 'case' entry per Notification the Mediator\n   * is interested in\n   *\n   * @param {puremvc.Notification} notification\n   * @return {void}\n   */\n  handleNotification (notification) { }\n\n  /**\n   * Called by the View when the Mediator is registered\n   * @return {void}\n   */\n  onRegister () { }\n\n  /**\n   * Called by the View when the Mediator is removed\n   */\n  onRemove () { }\n}\n\nconst NAME = 'Mediator'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/mediator/Mediator.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n\n/**\n * A base Proxy implementation.\n *\n * In PureMVC, Proxy classes are used to manage parts of the application's data\n * model.\n *\n * A Proxy might simply manage a reference to a local data object, in which case\n * interacting with it might involve setting and getting of its data in\n * synchronous fashion.\n *\n * Proxy classes are also used to encapsulate the application's interaction with\n * remote services to save or retrieve data, in which case, we adopt an\n * asyncronous idiom; setting data (or calling a method) on the Proxy and\n * listening for a\n * {@link puremvc.Notification Notification}\n * to be sent  when the Proxy has retrieved the data from the service.\n *\n *\n * @param {string} [proxyName]\n *  The Proxy's name. If none is provided, the Proxy will use its constructors\n *  NAME property.\n * @param {Object} [data]\n *  The Proxy's data object\n * @constructor\n */\nexport default class Proxy extends Notifier {\n  constructor (proxyName, data) {\n    super()\n    this.proxyName = proxyName || NAME\n    if (data) {\n      this.setData(data)\n    }\n  }\n\n  /**\n   * Get the Proxy's name.\n   *\n   * @return {string}\n   */\n  getProxyName () {\n    return this.proxyName\n  }\n\n  /**\n   * Set the Proxy's data object\n   *\n   * @param {Object} data\n   * @return {void}\n   */\n  setData (data) {\n    this.data = data\n  }\n\n  /**\n   * Get the Proxy's data object\n   *\n   * @return {Object}\n   */\n  getData () {\n    return this.data\n  }\n\n  /**\n   * Called by the {@link puremvc.Model Model} when\n   * the Proxy is registered.\n   *\n   * @return {void}\n   */\n  onRegister () {}\n\n  /**\n   * Called by the {@link puremvc.Model Model} when\n   * the Proxy is removed.\n   *\n   * @return {void}\n   */\n  onRemove () {}\n}\n\nconst NAME = 'Proxy'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/proxy/Proxy.js"],"sourceRoot":""}