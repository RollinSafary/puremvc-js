{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///library.js","webpack:///webpack/bootstrap 87c98946901682534934","webpack:///./com/koreez/puremvc/patterns/observer/Notifier.js","webpack:///./com/koreez/puremvc/patterns/observer/Observer.js","webpack:///./com/koreez/puremvc/core/View.js","webpack:///./com/koreez/puremvc/core/Controller.js","webpack:///./com/koreez/puremvc/core/Model.js","webpack:///./com/koreez/puremvc/patterns/command/SimpleCommand.js","webpack:///./com/koreez/puremvc/patterns/facade/Facade.js","webpack:///./com/koreez/puremvc/patterns/observer/Notification.js","webpack:///./index.js","webpack:///./com/koreez/puremvc/patterns/command/MacroCommand.js","webpack:///./com/koreez/puremvc/patterns/mediator/Mediator.js","webpack:///./com/koreez/puremvc/patterns/proxy/Proxy.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","value","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_Facade","_Facade2","obj","default","Notifier","multitonKey","facade","getFacade","notificationName","body","type","sendNotification","Error","MULTITON_MSG","getInstance","Observer","notifyMethod","notifyContext","setNotifyMethod","setNotifyContext","notify","context","notification","getNotifyMethod","getNotifyContext","_Observer","_Observer2","View","instanceMap","has","mediatorMap","Map","observerMap","initializeView","observer","push","set","getName","observers","observersBuffer","notifyObserver","compareNotifyContext","splice","delete","mediator","getMediatorName","initializeNotifier","interests","listNotificationInterests","handleNotification","registerObserver","onRegister","mediatorName","removeObserver","onRemove","removeView","_interopRequireDefault","_View","_View2","Controller","commandMap","initializeController","view","note","commandClassRef","commandInstance","execute","executeCommand","hasCommand","Model","proxyMap","initializeModel","proxy","getProxyName","proxyName","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_Notifier2","_Notifier3","SimpleCommand","_Notifier","getPrototypeOf","apply","arguments","_Controller","_Controller2","_Model","_Model2","_Notification","_Notification2","Facade","initializeFacade","controller","model","registerCommand","removeCommand","registerProxy","retrieveProxy","removeProxy","hasProxy","registerMediator","retrieveMediator","removeMediator","hasMediator","notifyObservers","removeModel","removeController","Notification","msg","toString","Proxy","Mediator","MacroCommand","undefined","_MacroCommand","_MacroCommand2","_SimpleCommand","_SimpleCommand2","_Mediator","_Mediator2","_Proxy","_Proxy2","PureMVC","_SimpleCommand3","_this","subCommands","initializeMacroCommand","subCommand","ref","shift","cmd","viewComponent","NAME","data","setData"],"mappings":"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","file":"library.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/4/17.\nn\n\nvar _Facade = __webpack_require__(6);\n\nvar _Facade2 = _interopRequireDefault(_Facade);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A Base Notifier implementation.\n *\n * {@link puremvc.MacroCommand MacroCommand},\n * {@link puremvc.SimpleCommand SimpleCommand},\n * {@link puremvc.Mediator Mediator} and\n * {@link puremvc.Proxy Proxy}\n * all have a need to send Notifications\n *\n * The Notifier interface provides a common method called #sendNotification that\n * relieves implementation code of the necessity to actually construct\n * Notifications.\n *\n * The Notifier class, which all of the above mentioned classes\n * extend, provides an initialized reference to the\n * {@link puremvc.Facade Facade}\n * Multiton, which is required for the convienience method\n * for sending Notifications but also eases implementation as these\n * classes have frequent\n * {@link puremvc.Facade Facade} interactions\n * and usually require access to the facade anyway.\n *\n * NOTE: In the MultiCore version of the framework, there is one caveat to\n * notifiers, they cannot send notifications or reach the facade until they\n * have a valid multitonKey.\n *\n * The multitonKey is set:\n *   - on a Command when it is executed by the Controller\n *   - on a Mediator is registered with the View\n *   - on a Proxy is registered with the Model.\n *\n * @constructor\n */\nvar Notifier = function () {\n  function Notifier() {\n    _classCallCheck(this, Notifier);\n  }\n\n  _createClass(Notifier, [{\n    key: 'initializeNotifier',\n\n    /**\n     * Initialize this Notifier instance.\n     *\n     * This is how a Notifier gets its multitonKey.\n     * Calls to #sendNotification or to access the\n     * facade will fail until after this method\n     * has been called.\n     *\n     * Mediators, Commands or Proxies may override\n     * this method in order to send notifications\n     * or access the Multiton Facade instance as\n     * soon as possible. They CANNOT access the facade\n     * in their constructors, since this method will not\n     * yet have been called.\n     *\n     *\n     * @param {string} key\n     *  The Notifiers multiton key;\n     * @return {void}\n     */\n    value: function initializeNotifier(key) {\n      this.multitonKey = key;\n      this.facade = this.getFacade();\n    }\n\n    /**\n     * Create and send a Notification.\n     *\n     * Keeps us from having to construct new Notification instances in our\n     * implementation code.\n     *\n     * @param {string} notificationName\n     *  A notification name\n     * @param {Object} [body]\n     *  The body of the notification\n     * @param {string} [type]\n     *  The notification type\n     * @return {void}\n     */\n\n  }, {\n    key: 'sendNotification',\n    value: function sendNotification(notificationName, body, type) {\n      if (this.facade) {\n        this.facade.sendNotification(notificationName, body, type);\n      }\n    }\n\n    /**\n     * Retrieve the Multiton Facade instance\n     *\n     *\n     * @protected\n     * @return {puremvc.Facade}\n     */\n\n  }, {\n    key: 'getFacade',\n    value: function getFacade() {\n      if (this.multitonKey === null) {\n        throw new Error(MULTITON_MSG);\n      }\n\n      return _Facade2.default.getInstance(this.multitonKey);\n    }\n  }]);\n\n  return Notifier;\n}();\n\nexports.default = Notifier;\n\n\nvar MULTITON_MSG = 'multitonKey for this Notifier not yet initialized!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by sargis on 7/4/17.\n */\n\n/**\n * A base Observer implementation.\n *\n * An Observer is an object that encapsulates information\n * about an interested object with a method that should\n * be called when a particular Notification is broadcast.\n *\n * In PureMVC, the Observer class assumes these responsibilities:\n *\n * - Encapsulate the notification (callback) method of the interested object.\n * - Encapsulate the notification context (this) of the interested object.\n * - Provide methods for setting the notification method and context.\n * - Provide a method for notifying the interested object.\n *\n *\n * The notification method on the interested object should take\n * one parameter of type Notification.\n *\n *\n * @param {Function} notifyMethod\n *  the notification method of the interested object\n * @param {Object} notifyContext\n *  the notification context of the interested object\n * @constructor\n */\nvar Observer = function () {\n  function Observer(notifyMethod, notifyContext) {\n    _classCallCheck(this, Observer);\n\n    this.setNotifyMethod(notifyMethod);\n    this.setNotifyContext(notifyContext);\n  }\n\n  /**\n   * Set the Observers notification method.\n   *\n   * The notification method should take one parameter of type Notification\n   * @param {Function} notifyMethod\n   *  the notification (callback) method of the interested object.\n   * @return {void}\n   */\n\n\n  _createClass(Observer, [{\n    key: \"setNotifyMethod\",\n    value: function setNotifyMethod(notifyMethod) {\n      this.notify = notifyMethod;\n    }\n\n    /**\n     * Set the Observers notification context.\n     *\n     * @param {Object} notifyContext\n     *  the notification context (this) of the interested object.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: \"setNotifyContext\",\n    value: function setNotifyContext(notifyContext) {\n      this.context = notifyContext;\n    }\n\n    /**\n     * Get the Function that this Observer will invoke when it is notified.\n     *\n     * @private\n     * @return {Function}\n     */\n\n  }, {\n    key: \"getNotifyMethod\",\n    value: function getNotifyMethod() {\n      return this.notify;\n    }\n\n    /**\n     * Get the Object that will serve as the Observers callback execution context\n     *\n     * @private\n     * @return {Object}\n     */\n\n  }, {\n    key: \"getNotifyContext\",\n    value: function getNotifyContext() {\n      return this.context;\n    }\n\n    /**\n     * Notify the interested object.\n     *\n     * @param {puremvc.Notification} notification\n     *  The Notification to pass to the interested objects notification method\n     * @return {void}\n     */\n\n  }, {\n    key: \"notifyObserver\",\n    value: function notifyObserver(notification) {\n      this.getNotifyMethod().call(this.getNotifyContext(), notification);\n    }\n\n    /**\n     * Compare an object to this Observers notification context.\n     *\n     * @param {Object} object\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"compareNotifyContext\",\n    value: function compareNotifyContext(object) {\n      return object === this.context;\n    }\n  }]);\n\n  return Observer;\n}();\n\nexports.default = Observer;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/4/17.\nn\nvar _Observer = __webpack_require__(1);\n\nvar _Observer2 = _interopRequireDefault(_Observer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This View implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Multiton\n * Factory #getInstance method.\n *\n * @param {string} key\n * @constructor\n * @throws {Error}\n *  if instance for this Multiton key has already been constructed\n */\nvar View = function () {\n  function View(key) {\n    _classCallCheck(this, View);\n\n    if (View.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.multitonKey = key;\n    this.mediatorMap = new Map();\n    this.observerMap = new Map();\n    this.initializeView();\n  }\n\n  /**\n   * View Singleton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @return {puremvc.View}\n   *  The Singleton instance of View\n   */\n\n\n  _createClass(View, [{\n    key: 'initializeView',\n\n\n    /**\n     * @protected\n     * Initialize the Singleton View instance\n     *\n     * Called automatically by the constructor, this is your opportunity to\n     * initialize the Singleton instance in your subclass without overriding the\n     * constructor\n     *\n     * @return {void}\n     */\n    value: function initializeView() {}\n\n    /**\n     * Register an Observer to be notified of Notifications with a given name\n     *\n     * @param {string} notificationName\n     *  The name of the Notifications to notify this Observer of\n     * @param {puremvc.Observer} observer\n     *  The Observer to register.\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerObserver',\n    value: function registerObserver(notificationName, observer) {\n      if (this.observerMap.has(notificationName)) {\n        this.observerMap.get(notificationName).push(observer);\n      } else {\n        this.observerMap.set(notificationName, [observer]);\n      }\n    }\n\n    /**\n     * Notify the Observersfor a particular Notification.\n     *\n     * All previously attached Observers for this Notification's\n     * list are notified and are passed a reference to the INotification in\n     * the order in which they were registered.\n     *\n     * @param {puremvc.Notification} notification\n     *  The Notification to notify Observers of\n     * @return {void}\n     */\n\n  }, {\n    key: 'notifyObservers',\n    value: function notifyObservers(notification) {\n      // SIC\n      if (this.observerMap.has(notification.getName())) {\n        var i = void 0;\n        var observers = this.observerMap.get(notification.getName());\n        var observersBuffer = [];\n        var observer = void 0;\n\n        for (i = 0; i < observers.length; ++i) {\n          observer = observers[i];\n          observersBuffer.push(observer);\n        }\n\n        for (i = 0; i < observersBuffer.length; ++i) {\n          observer = observersBuffer[i];\n          observer.notifyObserver(notification);\n        }\n      }\n    }\n\n    /**\n     * Remove the Observer for a given notifyContext from an observer list for\n     * a given Notification name\n     *\n     * @param {string} notificationName\n     *  Which observer list to remove from\n     * @param {Object} notifyContext\n     *  Remove the Observer with this object as its notifyContext\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeObserver',\n    value: function removeObserver(notificationName, notifyContext) {\n      // SIC\n      var observers = this.observerMap.get(notificationName);\n      for (var i = 0; i < observers.length; i++) {\n        if (observers[i].compareNotifyContext(notifyContext) === true) {\n          observers.splice(i, 1);\n          break;\n        }\n      }\n\n      if (observers.length === 0) {\n        this.observerMap.delete(notificationName);\n      }\n    }\n\n    /**\n     * Register a Mediator instance with the View.\n     *\n     * Registers the Mediator so that it can be retrieved by name,\n     * and further interrogates the Mediator for its\n     * {@link puremvc.Mediator#listNotificationInterests interests}.\n     *\n     * If the Mediator returns any Notification\n     * names to be notified about, an Observer is created encapsulating\n     * the Mediator instance's\n     * {@link puremvc.Mediator#handleNotification handleNotification}\n     * method and registering it as an Observer for all Notifications the\n     * Mediator is interested in.\n     *\n     * @param {puremvc.Mediator}\n     *  a reference to the Mediator instance\n     */\n\n  }, {\n    key: 'registerMediator',\n    value: function registerMediator(mediator) {\n      if (this.mediatorMap.has(mediator.getMediatorName())) {\n        return;\n      }\n\n      mediator.initializeNotifier(this.multitonKey);\n      // register the mediator for retrieval by name\n      this.mediatorMap.set(mediator.getMediatorName(), mediator);\n\n      // get notification interests if any\n      var interests = mediator.listNotificationInterests();\n\n      // register mediator as an observer for each notification\n      if (interests.length > 0) {\n        // create observer referencing this mediators handleNotification method\n        var observer = new _Observer2.default(mediator.handleNotification, mediator);\n        for (var i = 0; i < interests.length; i++) {\n          this.registerObserver(interests[i], observer);\n        }\n      }\n\n      mediator.onRegister();\n    }\n\n    /**\n     * Retrieve a Mediator from the View\n     *\n     * @param {string} mediatorName\n     *  The name of the Mediator instance to retrieve\n     * @return {puremvc.Mediator}\n     *  The Mediator instance previously registered with the given mediatorName\n     */\n\n  }, {\n    key: 'retrieveMediator',\n    value: function retrieveMediator(mediatorName) {\n      return this.mediatorMap.get(mediatorName);\n    }\n\n    /**\n     * Remove a Mediator from the View.\n     *\n     * @param {string} mediatorName\n     *  Name of the Mediator instance to be removed\n     * @return {puremvc.Mediator}\n     *  The Mediator that was removed from the View\n     */\n\n  }, {\n    key: 'removeMediator',\n    value: function removeMediator(mediatorName) {\n      var mediator = this.mediatorMap.get(mediatorName);\n      if (mediator) {\n        // for every notification the mediator is interested in...\n        var interests = mediator.listNotificationInterests();\n        for (var i = 0; i < interests.length; i++) {\n          // remove the observer linking the mediator to the notification\n          // interest\n          this.removeObserver(interests[i], mediator);\n        }\n\n        // remove the mediator from the map\n        this.mediatorMap.delete(mediatorName);\n\n        // alert the mediator that it has been removed\n        mediator.onRemove();\n      }\n\n      return mediator;\n    }\n\n    /**\n     * Check if a Mediator is registered or not.\n     *\n     * @param {string} mediatorName\n     * @return {boolean}\n     *  Whether a Mediator is registered with the given mediatorname\n     */\n\n  }, {\n    key: 'hasMediator',\n    value: function hasMediator(mediatorName) {\n      return this.mediatorMap.has(mediatorName);\n    }\n\n    /**\n     * Remove a View instance\n     *\n     * @return {void}\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!this.instanceMap.has(key)) {\n        this.instanceMap.set(key, new View(key));\n      }\n\n      return this.instanceMap.get(key);\n    }\n  }]);\n\n  return View;\n}();\n\nView.instanceMap = new Map();\n\nView.removeView = function (key) {\n  this.instanceMap.delete(key);\n};\n\nexports.default = View;\n\n\nvar MULTITON_MSG = 'View instance for this Multiton key already constructed!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/3/17.\nn\n\nvar _Observer = __webpack_require__(1);\n\nvar _Observer2 = _interopRequireDefault(_Observer);\n\nvar _View = __webpack_require__(2);\n\nvar _View2 = _interopRequireDefault(_View);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @constructor\n * This Controller implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static #getInstance factory method,\n * passing the unique key for this instance to it.\n * @param {string} key\n * @throws {Error}\n *  If instance for this Multiton key has already been constructed\n */\nvar Controller = function () {\n  function Controller(key) {\n    _classCallCheck(this, Controller);\n\n    if (Controller.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.multitonKey = key;\n    this.commandMap = new Map();\n    this.initializeController();\n  }\n\n  /**\n   * The Controllers multiton factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  A Controller's multiton key\n   * @return {puremvc.Controller}\n   *  the Multiton instance of Controller\n   */\n\n\n  _createClass(Controller, [{\n    key: 'initializeController',\n\n\n    /**\n     * @protected\n     *\n     * Initialize the multiton Controller instance.\n     *\n     * Called automatically by the constructor.\n     *\n     * Note that if you are using a subclass of View\n     * in your application, you should *also* subclass Controller\n     * and override the initializeController method in the\n     * following way.\n     *\n     * @return {void}\n     */\n    value: function initializeController() {\n      this.view = _View2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * If a SimpleCommand or MacroCommand has previously been registered to handle\n     * the given Notification then it is executed.\n     *\n     * @param {puremvc.Notification} note\n     * @return {void}\n     */\n\n  }, {\n    key: 'executeCommand',\n    value: function executeCommand(note) {\n      var commandClassRef = this.commandMap.get(note.getName());\n      if (!commandClassRef) {\n        return;\n      }\n      // eslint-disable-next-line\n      var commandInstance = new commandClassRef();\n      commandInstance.initializeNotifier(this.multitonKey);\n      commandInstance.execute(note);\n    }\n\n    /**\n     * Register a particular SimpleCommand or MacroCommand class as the handler for\n     * a particular Notification.\n     *\n     * If an command already been registered to handle Notifications with this name,\n     * it is no longer used, the new command is used instead.\n     *\n     * The Observer for the new command is only created if this the irst time a\n     * command has been regisered for this Notification name.\n     *\n     * @param {string} notificationName\n     *  the name of the Notification\n     * @param {Function} commandClassRef\n     *  a command constructor\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerCommand',\n    value: function registerCommand(notificationName, commandClassRef) {\n      if (!this.commandMap.has(notificationName)) {\n        this.view.registerObserver(notificationName, new _Observer2.default(this.executeCommand, this));\n      }\n      this.commandMap.set(notificationName, commandClassRef);\n    }\n\n    /**\n     * Check if a command is registered for a given Notification\n     *\n     * @param {string} notificationName\n     * @return {boolean}\n     *  whether a Command is currently registered for the given notificationName.\n     */\n\n  }, {\n    key: 'hasCommand',\n    value: function hasCommand(notificationName) {\n      return this.commandMap.has(notificationName);\n    }\n\n    /**\n     * Remove a previously registered command to\n     * {@link puremvc.Notification Notification}\n     * mapping.\n     *\n     * @param {string} notificationName\n     *  the name of the Notification to remove the command mapping for\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeCommand',\n    value: function removeCommand(notificationName) {\n      if (this.hasCommand(notificationName)) {\n        this.view.removeObserver(notificationName, this);\n        this.commandMap.delete(notificationName);\n      }\n    }\n\n    /**\n     * @static\n     * Remove a Controller instance.\n     *\n     * @param {string} key\n     *  multitonKey of Controller instance to remove\n     * @return {void}\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!this.instanceMap.has(key)) {\n        this.instanceMap.set(key, new Controller(key));\n      }\n\n      return this.instanceMap.get(key);\n    }\n  }, {\n    key: 'removeController',\n    value: function removeController(key) {\n      this.instanceMap.delete(key);\n    }\n  }]);\n\n  return Controller;\n}();\n\nController.instanceMap = new Map();\nexports.default = Controller;\n\n\nvar MULTITON_MSG = 'controller key for this Multiton key already constructed';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by sargis on 7/3/17.\n */\n/** A Multiton Model implementation.\n *\n * In PureMVC, the Model class provides\n * access to model objects (Proxies) by named lookup.\n *\n * The Model assumes these responsibilities:\n *\n * - Maintain a cache of {@link puremvc.Proxy Proxy}\n *   instances.\n * - Provide methods for registering, retrieving, and removing\n *   {@link puremvc.Proxy Proxy} instances.\n *\n * Your application must register\n * {@link puremvc.Proxy Proxy} instances with the Model.\n * Typically, you use a\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or\n * {@link puremvc.MacroCommand MacroCommand}\n * to create and register Proxy instances once the Facade has initialized the\n * *Core* actors.\n *\n * This Model implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the\n * {@link #getInstance static Multiton Factory method}\n * @constructor\n * @param {string} key\n *  The Models multiton key\n * @throws {Error}\n *  An error is thrown if this multitons key is already in use by another instance\n */\nvar Model = function () {\n  function Model(key) {\n    _classCallCheck(this, Model);\n\n    if (Model.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.multitonKey = key;\n    this.proxyMap = new Map();\n    this.initializeModel();\n  }\n\n  /**\n   * Model Multiton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key for the Model to retrieve\n   * @return {puremvc.Model}\n   *  the instance for this Multiton key\n   */\n\n\n  _createClass(Model, [{\n    key: 'initializeModel',\n\n\n    /**\n     * Initialize the Model instance.\n     *\n     * Called automatically by the constructor, this\n     * is your opportunity to initialize the Singleton\n     * instance in your subclass without overriding the\n     * constructor.\n     *\n     * @return void\n     */\n    value: function initializeModel() {}\n\n    /**\n     * Register a Proxy with the Model\n     * @param {puremvc.Proxy}\n     */\n\n  }, {\n    key: 'registerProxy',\n    value: function registerProxy(proxy) {\n      proxy.initializeNotifier(this.multitonKey);\n      this.proxyMap.set(proxy.getProxyName(), proxy);\n      proxy.onRegister();\n    }\n\n    /**\n     * Retrieve a Proxy from the Model\n     *\n     * @param {string} proxyName\n     * @return {puremvc.Proxy}\n     *  The Proxy instance previously registered with the provided proxyName\n     */\n\n  }, {\n    key: 'retrieveProxy',\n    value: function retrieveProxy(proxyName) {\n      return this.proxyMap.get(proxyName);\n    }\n\n    /**\n     * Check if a Proxy is registered\n     * @param {string} proxyName\n     * @return {boolean}\n     *  whether a Proxy is currently registered with the given proxyName.\n     */\n\n  }, {\n    key: 'hasProxy',\n    value: function hasProxy(proxyName) {\n      return this.proxyMap.has(proxyName);\n    }\n\n    /**\n     * Remove a Proxy from the Model.\n     *\n     * @param {string} proxyName\n     *  The name of the Proxy instance to remove\n     * @return {puremvc.Proxy}\n     *  The Proxy that was removed from the Model\n     */\n\n  }, {\n    key: 'removeProxy',\n    value: function removeProxy(proxyName) {\n      if (this.proxyMap.has(proxyName)) {\n        var proxy = this.proxyMap.get(proxyName);\n        proxy.onRemove();\n        this.proxyMap.delete(proxyName);\n        return proxy;\n      }\n      return null;\n    }\n\n    /**\n     * @static\n     * Remove a Model instance.\n     *\n     * @param {string} key\n     * @return {void}\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!this.instanceMap.has(key)) {\n        this.instanceMap.set(key, new Model(key));\n      }\n\n      return this.instanceMap.get(key);\n    }\n  }, {\n    key: 'removeModel',\n    value: function removeModel(key) {\n      this.instanceMap.delete(key);\n    }\n  }]);\n\n  return Model;\n}();\n\nModel.instanceMap = new Map();\nexports.default = Model;\n\n\nvar MULTITON_MSG = 'Model instance for this Multiton key already constructed!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Notifier2 = __webpack_require__(0);\n\nvar _Notifier3 = _interopRequireDefault(_Notifier2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n *\n * SimpleCommands encapsulate the business logic of your application. Your\n * subclass should override the #execute method where your business logic will\n * handle the\n * {@link puremvc.Notification Notification}\n *\n * Take a look at\n * {@link puremvc.Facade#registerCommand Facade's registerCommand}\n * or {@link puremvc.Controller#registerCommand Controllers registerCommand}\n * methods to see how to add commands to your application.\n *\n * @constructor\n */\nvar SimpleCommand = function (_Notifier) {\n  _inherits(SimpleCommand, _Notifier);\n\n  function SimpleCommand() {\n    _classCallCheck(this, SimpleCommand);\n\n    return _possibleConstructorReturn(this, (SimpleCommand.__proto__ || Object.getPrototypeOf(SimpleCommand)).apply(this, arguments));\n  }\n\n  _createClass(SimpleCommand, [{\n    key: 'execute',\n\n    /**\n     * Fulfill the use-case initiated by the given Notification\n     *\n     * In the Command Pattern, an application use-case typically begins with some\n     * user action, which results in a Notification is handled by the business logic\n     * in the #execute method of a command.\n     *\n     * @param {puremvc.Notification} notification\n     *  The notification to handle.\n     * @return {void}\n     */\n    value: function execute(notification) {}\n  }]);\n\n  return SimpleCommand;\n}(_Notifier3.default);\n\nexports.default = SimpleCommand;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\nreated by sargis on 7/4/17.\nn\nvar _Controller = __webpack_require__(3);\n\nvar _Controller2 = _interopRequireDefault(_Controller);\n\nvar _Model = __webpack_require__(4);\n\nvar _Model2 = _interopRequireDefault(_Model);\n\nvar _View = __webpack_require__(2);\n\nvar _View2 = _interopRequireDefault(_View);\n\nvar _Notification = __webpack_require__(7);\n\nvar _Notification2 = _interopRequireDefault(_Notification);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Facade exposes the functionality of the Controller, Model and View\n * actors to client facing code.\n *\n * This Facade implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Factory method,\n * passing the unique key for this instance to #getInstance\n *\n * @constructor\n * @param {string} key\n *  The multiton key to use to retrieve the Facade instance.\n * @throws {Error}\n *  If an attempt is made to instantiate Facade directly\n */\nvar Facade = function () {\n  function Facade(key) {\n    _classCallCheck(this, Facade);\n\n    if (Facade.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG);\n    }\n\n    this.initializeNotifier(key);\n    this.initializeFacade();\n  }\n\n  /**\n   * Facade Multiton Factory method.\n   * Note that this method will return null if supplied a\n   * null or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key use to retrieve a particular Facade instance\n   * @return {puremvc.Facade}\n   */\n\n\n  _createClass(Facade, [{\n    key: 'initializeFacade',\n\n\n    /**\n     * Initialize the Multiton Facade instance.\n     *\n     * Called automatically by the constructor. Override in your subclass to any\n     * subclass specific initializations. Be sure to call the 'super'\n     * initializeFacade method, though\n     *\n     * @protected\n     * @return {void}\n     */\n    value: function initializeFacade() {\n      this.initializeModel();\n      this.initializeController();\n      this.initializeView();\n    }\n\n    /**\n     * Initialize the {@link puremvc.Controller Controller}.\n     *\n     * Called by the #initializeFacade method.\n     *\n     * Override this method in your subclass of Facade\n     * if one or both of the following are true:\n      * - You wish to initialize a different Controller\n     * - You have\n     * {@link puremvc.SimpleCommand SimpleCommand}s\n     * or {@link puremvc.MacroCommand MacroCommand}s\n     * to register with the Controllerat startup.\n     *\n     * If you don't want to initialize a different Controller,\n     * call the 'super' initializeControlle method at the beginning of your\n     * method, then register commands.\n     *\n     * @protected\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeController',\n    value: function initializeController() {\n      if (this.controller) {\n        return;\n      }\n      this.controller = _Controller2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * @protected\n     * Initialize the {@link puremvc.Model Model};\n     *\n     * Called by the #initializeFacade method.\n     * Override this method in your subclass of Facade if one of the following are\n     * true:\n     *\n     * - You wish to initialize a different Model.\n     *\n     * - You have {@link puremvc.Proxy Proxy}s to\n     *   register with the Model that do not retrieve a reference to the Facade at\n     *   construction time.\n     *\n     * If you don't want to initialize a different Model\n     * call 'super' #initializeModel at the beginning of your method, then register\n     * Proxys.\n     *\n     * Note: This method is *rarely* overridden; in practice you are more\n     * likely to use a command to create and registerProxys with the Model>,\n     * since Proxys with mutable data will likely\n     * need to send Notifications and thus will likely want to fetch a reference to\n     * the Facade during their construction.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeModel',\n    value: function initializeModel() {\n      if (this.model) {\n        return;\n      }\n      this.model = _Model2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * @protected\n     *\n     * Initialize the {@link puremvc.View View}.\n     *\n     * Called by the #initializeFacade method.\n     *\n     * Override this method in your subclass of Facade if one or both of the\n     * following are true:\n     *\n     * - You wish to initialize a different View.\n     * - You have Observers to register with the View\n     *\n     * If you don't want to initialize a different View\n     * call 'super' #initializeView at the beginning of your\n     * method, then register Mediator instances.\n     *\n     * Note: This method is *rarely* overridden; in practice you are more\n     * likely to use a command to create and register Mediators\n     * with the View, since Mediator instances will need to send\n     * Notifications and thus will likely want to fetch a reference\n     * to the Facade during their construction.\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeView',\n    value: function initializeView() {\n      if (this.view) {\n        return;\n      }\n      this.view = _View2.default.getInstance(this.multitonKey);\n    }\n\n    /**\n     * Register a command with the Controller by Notification name\n     * @param {string} notificationName\n     *  The name of the Notification to associate the command with\n     * @param {Function} commandClassRef\n     *  A reference ot the commands constructor.\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerCommand',\n    value: function registerCommand(notificationName, commandClassRef) {\n      this.controller.registerCommand(notificationName, commandClassRef);\n    }\n\n    /**\n     * Remove a previously registered command to Notification mapping from the\n     * {@link puremvc.Controller#removeCommand Controller}\n     * @param {string} notificationName\n     *  The name of the the Notification to remove from the command mapping for.\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeCommand',\n    value: function removeCommand(notificationName) {\n      this.controller.removeCommand(notificationName);\n    }\n\n    /**\n     * Check if a command is registered for a given notification.\n     *\n     * @param {string} notificationName\n     *  A Notification name\n     * @return {boolean}\n     *  Whether a comman is currently registered for the given notificationName\n     */\n\n  }, {\n    key: 'hasCommand',\n    value: function hasCommand(notificationName) {\n      return this.controller.hasCommand(notificationName);\n    }\n\n    /**\n     * Register a Proxy with the {@link puremvc.Model#registerProxy Model}\n     * by name.\n     *\n     * @param {puremvc.Proxy} proxy\n     *  The Proxy instance to be registered with the Model.\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerProxy',\n    value: function registerProxy(proxy) {\n      this.model.registerProxy(proxy);\n    }\n\n    /**\n     * Retrieve a Proxy from the Model\n     *\n     * @param {string} proxyName\n     * @return {puremvc.Proxy}\n     */\n\n  }, {\n    key: 'retrieveProxy',\n    value: function retrieveProxy(proxyName) {\n      return this.model.retrieveProxy(proxyName);\n    }\n\n    /**\n     * Remove a Proxy from the Model by name\n     * @param {string} proxyName\n     *  The name of the Proxy\n     * @return {puremvc.Proxy}\n     *  The Proxy that was removed from the Model\n     */\n\n  }, {\n    key: 'removeProxy',\n    value: function removeProxy(proxyName) {\n      if (this.model) {\n        return this.model.removeProxy(proxyName);\n      }\n      return null;\n    }\n\n    /**\n     * Check it a Proxy is registered.\n     * @param {string} proxyName\n     *  A Proxy name\n     * @return {boolean}\n     *  Whether a Proxy is currently registered with the given proxyName\n     */\n\n  }, {\n    key: 'hasProxy',\n    value: function hasProxy(proxyName) {\n      return this.model.hasProxy(proxyName);\n    }\n\n    /**\n     * Register a Mediator with with the View.\n     *\n     * @param {puremvc.Mediator} mediator\n     *  A reference to the Mediator to register\n     * @return {void}\n     */\n\n  }, {\n    key: 'registerMediator',\n    value: function registerMediator(mediator) {\n      this.view.registerMediator(mediator);\n    }\n\n    /**\n     * Retrieve a Mediator from the View by name\n     *\n     * @param {string} mediatorName\n     *  The Mediators name\n     * @return {puremvc.Mediator}\n     *  The retrieved Mediator\n     */\n\n  }, {\n    key: 'retrieveMediator',\n    value: function retrieveMediator(mediatorName) {\n      return this.view.retrieveMediator(mediatorName);\n    }\n\n    /**\n     * Remove a Mediator from the View.\n     *\n     * @param {string} mediatorName\n     *  The name of the Mediator to remove.\n     * @return {puremvc.Mediator}\n     *  The removed Mediator\n     */\n\n  }, {\n    key: 'removeMediator',\n    value: function removeMediator(mediatorName) {\n      return this.view.removeMediator(mediatorName);\n    }\n\n    /**\n     * Check if a Mediator is registered or not.\n     *\n     * @param {string} mediatorName\n     *  A Mediator name\n     * @return {boolean}\n     *  Whether a Mediator is registered with the given mediatorName\n     */\n\n  }, {\n    key: 'hasMediator',\n    value: function hasMediator(mediatorName) {\n      return this.view.hasMediator(mediatorName);\n    }\n\n    /**\n     * Create and send a\n     * {@link puremvc.Notification Notification}\n     *\n     * Keeps us from having to construct new Notification instances in our\n     * implementation\n     *\n     * @param {string} notificationName\n     *  The name of the Notification to send\n     * @param {Object} [body]\n     *  The body of the notification\n     * @param {string} [type]\n     *  The type of the notification\n     * @return {void}\n     */\n\n  }, {\n    key: 'sendNotification',\n    value: function sendNotification(notificationName, body, type) {\n      this.notifyObservers(new _Notification2.default(notificationName, body, type));\n    }\n\n    /**\n     * Notify {@link puremvc.Observer Observer}s\n     *\n     * This method is left public mostly for backward compatibility, and to allow\n     * you to send custom notification classes using the facade.\n     *\n     * Usually you should just call sendNotification and pass the parameters, never\n     * having to construct the notification yourself.\n     *\n     * @param {puremvc.Notification} notification\n     *  The Notification to send\n     * @return {void}\n     */\n\n  }, {\n    key: 'notifyObservers',\n    value: function notifyObservers(notification) {\n      this.view.notifyObservers(notification);\n    }\n\n    /**\n     * Initialize the Facades Notifier capabilities by setting the Multiton key for\n     * this facade instance.\n     *\n     * Not called directly, but instead from the constructor when #getInstance is\n     * invoked. It is necessary to be public in order to implement Notifier\n     *\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'initializeNotifier',\n    value: function initializeNotifier(key) {\n      this.multitonKey = key;\n    }\n\n    /**\n     * Check if a *Core* is registered or not\n     *\n     * @static\n     * @param {string} key\n     *  The multiton key for the *Core* in question\n     * @return {boolean}\n     *  Whether a *Core* is registered with the given key\n     */\n\n  }], [{\n    key: 'getInstance',\n    value: function getInstance(key) {\n      if (!key) {\n        return null;\n      }\n\n      if (!Facade.instanceMap.has(key)) {\n        Facade.instanceMap.set(key, new Facade(key));\n      }\n\n      return Facade.instanceMap.get(key);\n    }\n  }, {\n    key: 'hasCore',\n    value: function hasCore(key) {\n      return this.instanceMap.has(key);\n    }\n\n    /**\n     * Remove a *Core*\n     *\n     * Remove the Model, View, Controller and Facade for a given key.\n     *\n     * @static\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeCore',\n    value: function removeCore(key) {\n      if (!this.instanceMap.has(key)) {\n        return;\n      }\n      _Model2.default.removeModel(key);\n      _View2.default.removeView(key);\n      _Controller2.default.removeController(key);\n      delete this.instanceMap[key];\n    }\n  }]);\n\n  return Facade;\n}();\n\nFacade.instanceMap = new Map();\nexports.default = Facade;\n\n\nvar MULTITON_MSG = 'Facade instance for this Multiton key already constructed!';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by sargis on 7/4/17.\n */\n/**\n * A base Notification implementation.\n *\n * PureMVC does not rely upon underlying event models such as the one provided\n * with the DOM or other browser centric W3C event models.\n *\n * The Observer Pattern as implemented within PureMVC exists to support\n * event-driven communication between the application and the actors of the MVC\n * triad.\n *\n * Notifications are not meant to be a replacement for events in the browser.\n * Generally, Mediator implementors place event listeners on their view\n * components, which they then handle in the usual way. This may lead to the\n * broadcast of Notifications to trigger commands or to communicate with other\n * Mediators. {@link puremvc.Proxy Proxy},\n * {@link puremvc.SimpleCommand SimpleCommand}\n * and {@link puremvc.MacroCommand MacroCommand}\n * instances communicate with each other and\n * {@link puremvc.Mediator Mediator}s\n * by broadcasting Notifications.\n *\n * A key difference between browser events and PureMVC Notifications is that\n * events follow the 'Chain of Responsibility' pattern, 'bubbling' up the\n * display hierarchy until some parent component handles the event, while\n * PureMVC Notification follow a 'Publish/Subscribe' pattern. PureMVC classes\n * need not be related to each other in a parent/child relationship in order to\n * communicate with one another using Notifications.\n *\n * @constructor\n * @param {string} name\n *  The Notification name\n * @param {Object} [body]\n *  The Notification body\n * @param {Object} [type]\n *  The Notification type\n */\nvar Notification = function () {\n  function Notification(name, body, type) {\n    _classCallCheck(this, Notification);\n\n    this.name = name;\n    this.body = body;\n    this.type = type;\n  }\n\n  /**\n   * Get the name of the Notification instance\n   *\n   * @return {string}\n   *  The name of the Notification instance\n   */\n\n\n  _createClass(Notification, [{\n    key: 'getName',\n    value: function getName() {\n      return this.name;\n    }\n\n    /**\n     * Set this Notifications body.\n     * @param {Object} body\n     * @return {void}\n     */\n\n  }, {\n    key: 'setBody',\n    value: function setBody(body) {\n      this.body = body;\n    }\n\n    /**\n     * Get the Notification body.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: 'getBody',\n    value: function getBody() {\n      return this.body;\n    }\n\n    /**\n     * Set the type of the Notification instance.\n     *\n     * @param {Object} type\n     * @return {void}\n     */\n\n  }, {\n    key: 'setType',\n    value: function setType(type) {\n      this.type = type;\n    }\n\n    /**\n     * Get the type of the Notification instance.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: 'getType',\n    value: function getType() {\n      return this.type;\n    }\n\n    /**\n     * Get a string representation of the Notification instance\n     *\n     * @return {string}\n     */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var msg = 'Notification Name: ' + this.getName();\n      msg += '\\nBody:' + (this.body ? 'null' : this.body.toString());\n      msg += '\\nType:' + (this.type ? 'null' : this.type);\n      return msg;\n    }\n  }]);\n\n  return Notification;\n}();\n\nexports.default = Notification;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Proxy = exports.Observer = exports.Notifier = exports.Notification = exports.Mediator = exports.Facade = exports.SimpleCommand = exports.MacroCommand = exports.View = exports.Model = exports.Controller = undefined;\n\nvar _Controller = __webpack_require__(3);\n\nvar _Controller2 = _interopRequireDefault(_Controller);\n\nvar _Model = __webpack_require__(4);\n\nvar _Model2 = _interopRequireDefault(_Model);\n\nvar _View = __webpack_require__(2);\n\nvar _View2 = _interopRequireDefault(_View);\n\nvar _MacroCommand = __webpack_require__(9);\n\nvar _MacroCommand2 = _interopRequireDefault(_MacroCommand);\n\nvar _SimpleCommand = __webpack_require__(5);\n\nvar _SimpleCommand2 = _interopRequireDefault(_SimpleCommand);\n\nvar _Facade = __webpack_require__(6);\n\nvar _Facade2 = _interopRequireDefault(_Facade);\n\nvar _Mediator = __webpack_require__(10);\n\nvar _Mediator2 = _interopRequireDefault(_Mediator);\n\nvar _Notification = __webpack_require__(7);\n\nvar _Notification2 = _interopRequireDefault(_Notification);\n\nvar _Notifier = __webpack_require__(0);\n\nvar _Notifier2 = _interopRequireDefault(_Notifier);\n\nvar _Observer = __webpack_require__(1);\n\nvar _Observer2 = _interopRequireDefault(_Observer);\n\nvar _Proxy = __webpack_require__(11);\n\nvar _Proxy2 = _interopRequireDefault(_Proxy);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Controller = _Controller2.default;\nexports.Model = _Model2.default;\nexports.View = _View2.default;\nexports.MacroCommand = _MacroCommand2.default;\nexports.SimpleCommand = _SimpleCommand2.default;\nexports.Facade = _Facade2.default;\nexports.Mediator = _Mediator2.default;\nexports.Notification = _Notification2.default;\nexports.Notifier = _Notifier2.default;\nexports.Observer = _Observer2.default;\nexports.Proxy = _Proxy2.default;\n\n\nvar PureMVC = {};\nPureMVC.Controller = _Controller2.default;\nPureMVC.Model = _Model2.default;\nPureMVC.View = _View2.default;\nPureMVC.MacroCommand = _MacroCommand2.default;\nPureMVC.SimpleCommand = _SimpleCommand2.default;\nPureMVC.Facade = _Facade2.default;\nPureMVC.Mediator = _Mediator2.default;\nPureMVC.Notification = _Notification2.default;\nPureMVC.Notifier = _Notifier2.default;\nPureMVC.Observer = _Observer2.default;\nPureMVC.Proxy = _Proxy2.default;\n\nexports.default = PureMVC;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _SimpleCommand2 = __webpack_require__(5);\n\nvar _SimpleCommand3 = _interopRequireDefault(_SimpleCommand2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A base command implementation that executes other commands, such as\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or {@link puremvc.MacroCommand MacroCommand}\n * subclasses.\n *\n * A MacroCommand maintains an list of\n * command constructor references called *SubCommands*.\n *\n * When #execute is called, the MacroCommand\n * instantiates and calls #execute on each of its *SubCommands* in turn.\n * Each *SubCommand* will be passed a reference to the original\n * {@link puremvc.Notification Notification}\n * that was passed to the MacroCommands #execute method\n *\n * Unlike {@link puremvc.SimpleCommand SimpleCommand},\n * your subclass should not override #execute but instead, should\n * override the #initializeMacroCommand method, calling #addSubCommand once for\n * each *SubCommand* to be executed.\n *\n * If your subclass does define a constructor, be sure to call \"super\"\n *\n * @constructor\n */\nvar MacroCommand = function (_SimpleCommand) {\n  _inherits(MacroCommand, _SimpleCommand);\n\n  function MacroCommand() {\n    _classCallCheck(this, MacroCommand);\n\n    var _this = _possibleConstructorReturn(this, (MacroCommand.__proto__ || Object.getPrototypeOf(MacroCommand)).call(this));\n\n    _this.subCommands = [];\n    _this.initializeMacroCommand();\n    return _this;\n  }\n\n  /**\n   * @protected\n   * Initialize the MacroCommand.\n   *\n   * In your subclass, override this method to\n   * initialize the MacroCommand's *SubCommand*\n   * list with command class references\n   *\n   * Note that *SubCommand*s may be any command implementor,\n   * MacroCommands or SimpleCommands are both acceptable.\n   * @return {void}\n   */\n\n\n  _createClass(MacroCommand, [{\n    key: 'initializeMacroCommand',\n    value: function initializeMacroCommand() {}\n\n    /**\n     * @protected\n     * Add a *SubCommand*\n     *\n     * The *SubCommand*s will be called in First In / First Out (FIFO) order\n     * @param {Function} commandClassRef\n     *  A reference to a subclassed SimpleCommand or MacroCommand constructor\n     */\n\n  }, {\n    key: 'addSubCommand',\n    value: function addSubCommand(subCommand) {\n      this.subCommands.push(subCommand);\n    }\n\n    /**\n     * Execute this MacroCommands *SubCommands*\n     *\n     * The *SubCommand*s will be called in First In / First Out (FIFO) order\n     * @param {puremvc.Notification} note\n     *  The Notification object to be passed to each *SubCommand*\n     */\n\n  }, {\n    key: 'execute',\n    value: function execute(note) {\n      while (this.subCommands.length > 0) {\n        var ref = this.subCommands.shift();\n        // eslint-disable-next-line new-cap\n        var cmd = new ref();\n        cmd.initializeNotifier(this.multitonKey);\n        cmd.execute(note);\n      }\n    }\n  }]);\n\n  return MacroCommand;\n}(_SimpleCommand3.default);\n\nexports.default = MacroCommand;\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Notifier2 = __webpack_require__(0);\n\nvar _Notifier3 = _interopRequireDefault(_Notifier2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A base Mediator implementation.\n *\n * In PureMVC, Mediator classes are used to mediate communication between a view\n * component and the rest of the application.\n *\n * A Mediator should listen to its view components for events, and handle them\n * by sending notifications (to be handled by other Mediators,\n * {@link puremvc.SimpleCommand SimpleCommands}\n * or\n * {@link puremvc.MacroCommand MacroCommands})\n * or passing data from the view component directly to a\n * {@link puremvc.Proxy Proxy}, such as submitting\n * the contents of a form to a service.\n *\n * Mediators should not perform business logic, maintain state or other\n * information for its view component, or break the encapsulation of the view\n * component by manipulating the view component's children. It should only call\n * methods or set properties on the view component.\n *\n * The view component should encapsulate its own behavior and implementation by\n * exposing methods and properties that the Mediator can call without having to\n * know about the view component's children.\n *\n * @constructor\n * @param {string} [mediatorName]\n *  The Mediators name. The Mediators static #NAME value is used by default\n * @param {Object} [viewComponent]\n *  The Mediators {@link #setViewComponent viewComponent}.\n */\nvar Mediator = function (_Notifier) {\n  _inherits(Mediator, _Notifier);\n\n  function Mediator(mediatorName, viewComponent) {\n    _classCallCheck(this, Mediator);\n\n    var _this = _possibleConstructorReturn(this, (Mediator.__proto__ || Object.getPrototypeOf(Mediator)).call(this));\n\n    _this.mediatorName = mediatorName || NAME;\n    _this.viewComponent = viewComponent;\n    return _this;\n  }\n\n  /**\n   * Get the name of the Mediator\n   *\n   * @return {string}\n   *  The Mediator name\n   */\n\n\n  _createClass(Mediator, [{\n    key: 'getMediatorName',\n    value: function getMediatorName() {\n      return this.mediatorName;\n    }\n\n    /**\n     * Set the Mediators view component. This could\n     * be a HTMLElement, a bespoke UiComponent wrapper\n     * class, a MooTools Element, a jQuery result or a\n     * css selector, depending on which DOM abstraction\n     * library you are using.\n     *\n     *\n     * @param {Object} the view component\n     * @return {void}\n     */\n\n  }, {\n    key: 'setViewComponent',\n    value: function setViewComponent(viewComponent) {\n      this.viewComponent = viewComponent;\n    }\n\n    /**\n     * Get the Mediators view component.\n     *\n     * Additionally, an optional explicit getter can be\n     * be defined in the subclass that defines the\n     * view components, providing a more semantic interface\n     * to the Mediator.\n     *\n     * This is different from the AS3 implementation in\n     * the sense that no casting is required from the\n     * object supplied as the view component.\n     *\n     * @return {Object}\n     *  The view component\n     */\n\n  }, {\n    key: 'getViewComponent',\n    value: function getViewComponent() {\n      return this.viewComponent;\n    }\n\n    /**\n     * List the Notification names this Mediator is interested\n     * in being notified of.\n     *\n     * @return {Array}\n     *  The list of Notification names.\n     */\n\n  }, {\n    key: 'listNotificationInterests',\n    value: function listNotificationInterests() {\n      return [];\n    }\n\n    /**\n     * Handle Notifications.\n     *\n     * Typically this will be handled in a switch statement\n     * with one 'case' entry per Notification the Mediator\n     * is interested in\n     *\n     * @param {puremvc.Notification} notification\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleNotification',\n    value: function handleNotification(notification) {}\n\n    /**\n     * Called by the View when the Mediator is registered\n     * @return {void}\n     */\n\n  }, {\n    key: 'onRegister',\n    value: function onRegister() {}\n\n    /**\n     * Called by the View when the Mediator is removed\n     */\n\n  }, {\n    key: 'onRemove',\n    value: function onRemove() {}\n  }]);\n\n  return Mediator;\n}(_Notifier3.default);\n\nexports.default = Mediator;\n\n\nvar NAME = 'Mediator';\nmodule.exports = exports['default'];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Notifier2 = __webpack_require__(0);\n\nvar _Notifier3 = _interopRequireDefault(_Notifier2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by sargis on 7/4/17.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\n/**\n * A base Proxy implementation.\n *\n * In PureMVC, Proxy classes are used to manage parts of the application's data\n * model.\n *\n * A Proxy might simply manage a reference to a local data object, in which case\n * interacting with it might involve setting and getting of its data in\n * synchronous fashion.\n *\n * Proxy classes are also used to encapsulate the application's interaction with\n * remote services to save or retrieve data, in which case, we adopt an\n * asyncronous idiom; setting data (or calling a method) on the Proxy and\n * listening for a\n * {@link puremvc.Notification Notification}\n * to be sent  when the Proxy has retrieved the data from the service.\n *\n *\n * @param {string} [proxyName]\n *  The Proxy's name. If none is provided, the Proxy will use its constructors\n *  NAME property.\n * @param {Object} [data]\n *  The Proxy's data object\n * @constructor\n */\nvar Proxy = function (_Notifier) {\n  _inherits(Proxy, _Notifier);\n\n  function Proxy(proxyName, data) {\n    _classCallCheck(this, Proxy);\n\n    var _this = _possibleConstructorReturn(this, (Proxy.__proto__ || Object.getPrototypeOf(Proxy)).call(this));\n\n    _this.proxyName = proxyName || NAME;\n    if (data) {\n      _this.setData(data);\n    }\n    return _this;\n  }\n\n  /**\n   * Get the Proxy's name.\n   *\n   * @return {string}\n   */\n\n\n  _createClass(Proxy, [{\n    key: 'getProxyName',\n    value: function getProxyName() {\n      return this.proxyName;\n    }\n\n    /**\n     * Set the Proxy's data object\n     *\n     * @param {Object} data\n     * @return {void}\n     */\n\n  }, {\n    key: 'setData',\n    value: function setData(data) {\n      this.data = data;\n    }\n\n    /**\n     * Get the Proxy's data object\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: 'getData',\n    value: function getData() {\n      return this.data;\n    }\n\n    /**\n     * Called by the {@link puremvc.Model Model} when\n     * the Proxy is registered.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'onRegister',\n    value: function onRegister() {}\n\n    /**\n     * Called by the {@link puremvc.Model Model} when\n     * the Proxy is removed.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'onRemove',\n    value: function onRemove() {}\n  }]);\n\n  return Proxy;\n}(_Notifier3.default);\n\nexports.default = Proxy;\n\n\nvar NAME = 'Proxy';\nmodule.exports = exports['default'];\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// library.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 87c98946901682534934","/**\n * Created by sargis on 7/4/17.\n */\nimport Facade from '../facade/Facade'\n/**\n * A Base Notifier implementation.\n *\n * {@link puremvc.MacroCommand MacroCommand},\n * {@link puremvc.SimpleCommand SimpleCommand},\n * {@link puremvc.Mediator Mediator} and\n * {@link puremvc.Proxy Proxy}\n * all have a need to send Notifications\n *\n * The Notifier interface provides a common method called #sendNotification that\n * relieves implementation code of the necessity to actually construct\n * Notifications.\n *\n * The Notifier class, which all of the above mentioned classes\n * extend, provides an initialized reference to the\n * {@link puremvc.Facade Facade}\n * Multiton, which is required for the convienience method\n * for sending Notifications but also eases implementation as these\n * classes have frequent\n * {@link puremvc.Facade Facade} interactions\n * and usually require access to the facade anyway.\n *\n * NOTE: In the MultiCore version of the framework, there is one caveat to\n * notifiers, they cannot send notifications or reach the facade until they\n * have a valid multitonKey.\n *\n * The multitonKey is set:\n *   - on a Command when it is executed by the Controller\n *   - on a Mediator is registered with the View\n *   - on a Proxy is registered with the Model.\n *\n * @constructor\n */\nexport default class Notifier {\n  /**\n   * Initialize this Notifier instance.\n   *\n   * This is how a Notifier gets its multitonKey.\n   * Calls to #sendNotification or to access the\n   * facade will fail until after this method\n   * has been called.\n   *\n   * Mediators, Commands or Proxies may override\n   * this method in order to send notifications\n   * or access the Multiton Facade instance as\n   * soon as possible. They CANNOT access the facade\n   * in their constructors, since this method will not\n   * yet have been called.\n   *\n   *\n   * @param {string} key\n   *  The Notifiers multiton key;\n   * @return {void}\n   */\n  initializeNotifier (key) {\n    this.multitonKey = key\n    this.facade = this.getFacade()\n  }\n\n  /**\n   * Create and send a Notification.\n   *\n   * Keeps us from having to construct new Notification instances in our\n   * implementation code.\n   *\n   * @param {string} notificationName\n   *  A notification name\n   * @param {Object} [body]\n   *  The body of the notification\n   * @param {string} [type]\n   *  The notification type\n   * @return {void}\n   */\n  sendNotification (notificationName, body, type) {\n    if (this.facade) {\n      this.facade.sendNotification(notificationName, body, type)\n    }\n  }\n\n  /**\n   * Retrieve the Multiton Facade instance\n   *\n   *\n   * @protected\n   * @return {puremvc.Facade}\n   */\n  getFacade () {\n    if (this.multitonKey === null) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    return Facade.getInstance(this.multitonKey)\n  }\n}\n\nconst MULTITON_MSG = 'multitonKey for this Notifier not yet initialized!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/observer/Notifier.js","/**\n * Created by sargis on 7/4/17.\n */\n\n/**\n * A base Observer implementation.\n *\n * An Observer is an object that encapsulates information\n * about an interested object with a method that should\n * be called when a particular Notification is broadcast.\n *\n * In PureMVC, the Observer class assumes these responsibilities:\n *\n * - Encapsulate the notification (callback) method of the interested object.\n * - Encapsulate the notification context (this) of the interested object.\n * - Provide methods for setting the notification method and context.\n * - Provide a method for notifying the interested object.\n *\n *\n * The notification method on the interested object should take\n * one parameter of type Notification.\n *\n *\n * @param {Function} notifyMethod\n *  the notification method of the interested object\n * @param {Object} notifyContext\n *  the notification context of the interested object\n * @constructor\n */\nexport default class Observer {\n  constructor (notifyMethod, notifyContext) {\n    this.setNotifyMethod(notifyMethod)\n    this.setNotifyContext(notifyContext)\n  }\n\n  /**\n   * Set the Observers notification method.\n   *\n   * The notification method should take one parameter of type Notification\n   * @param {Function} notifyMethod\n   *  the notification (callback) method of the interested object.\n   * @return {void}\n   */\n  setNotifyMethod (notifyMethod) {\n    this.notify = notifyMethod\n  }\n\n  /**\n   * Set the Observers notification context.\n   *\n   * @param {Object} notifyContext\n   *  the notification context (this) of the interested object.\n   *\n   * @return {void}\n   */\n  setNotifyContext (notifyContext) {\n    this.context = notifyContext\n  }\n\n  /**\n   * Get the Function that this Observer will invoke when it is notified.\n   *\n   * @private\n   * @return {Function}\n   */\n  getNotifyMethod () {\n    return this.notify\n  }\n\n  /**\n   * Get the Object that will serve as the Observers callback execution context\n   *\n   * @private\n   * @return {Object}\n   */\n  getNotifyContext () {\n    return this.context\n  }\n\n  /**\n   * Notify the interested object.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to pass to the interested objects notification method\n   * @return {void}\n   */\n  notifyObserver (notification) {\n    this.getNotifyMethod().call(this.getNotifyContext(), notification)\n  }\n\n  /**\n   * Compare an object to this Observers notification context.\n   *\n   * @param {Object} object\n   *\n   * @return {boolean}\n   */\n  compareNotifyContext (object) {\n    return object === this.context\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/observer/Observer.js","/**\n * Created by sargis on 7/4/17.\n */\n\nimport Observer from '../patterns/observer/Observer'\n/**\n * This View implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Multiton\n * Factory #getInstance method.\n *\n * @param {string} key\n * @constructor\n * @throws {Error}\n *  if instance for this Multiton key has already been constructed\n */\nexport default class View {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (View.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.mediatorMap = new Map()\n    this.observerMap = new Map()\n    this.initializeView()\n  }\n\n  /**\n   * View Singleton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @return {puremvc.View}\n   *  The Singleton instance of View\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new View(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * @protected\n   * Initialize the Singleton View instance\n   *\n   * Called automatically by the constructor, this is your opportunity to\n   * initialize the Singleton instance in your subclass without overriding the\n   * constructor\n   *\n   * @return {void}\n   */\n  initializeView () {}\n\n  /**\n   * Register an Observer to be notified of Notifications with a given name\n   *\n   * @param {string} notificationName\n   *  The name of the Notifications to notify this Observer of\n   * @param {puremvc.Observer} observer\n   *  The Observer to register.\n   * @return {void}\n   */\n  registerObserver (notificationName, observer) {\n    if (this.observerMap.has(notificationName)) {\n      this.observerMap.get(notificationName).push(observer)\n    } else {\n      this.observerMap.set(notificationName, [observer])\n    }\n  }\n\n  /**\n   * Notify the Observersfor a particular Notification.\n   *\n   * All previously attached Observers for this Notification's\n   * list are notified and are passed a reference to the INotification in\n   * the order in which they were registered.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to notify Observers of\n   * @return {void}\n   */\n  notifyObservers (notification) {\n    // SIC\n    if (this.observerMap.has(notification.getName())) {\n      let i\n      const observers = this.observerMap.get(notification.getName())\n      const observersBuffer = []\n      let observer\n\n      for (i = 0; i < observers.length; ++i) {\n        observer = observers[i]\n        observersBuffer.push(observer)\n      }\n\n      for (i = 0; i < observersBuffer.length; ++i) {\n        observer = observersBuffer[i]\n        observer.notifyObserver(notification)\n      }\n    }\n  }\n\n  /**\n   * Remove the Observer for a given notifyContext from an observer list for\n   * a given Notification name\n   *\n   * @param {string} notificationName\n   *  Which observer list to remove from\n   * @param {Object} notifyContext\n   *  Remove the Observer with this object as its notifyContext\n   * @return {void}\n   */\n  removeObserver (notificationName, notifyContext) {\n    // SIC\n    const observers = this.observerMap.get(notificationName)\n    for (let i = 0; i < observers.length; i++) {\n      if (observers[i].compareNotifyContext(notifyContext) === true) {\n        observers.splice(i, 1)\n        break\n      }\n    }\n\n    if (observers.length === 0) {\n      this.observerMap.delete(notificationName)\n    }\n  }\n\n  /**\n   * Register a Mediator instance with the View.\n   *\n   * Registers the Mediator so that it can be retrieved by name,\n   * and further interrogates the Mediator for its\n   * {@link puremvc.Mediator#listNotificationInterests interests}.\n   *\n   * If the Mediator returns any Notification\n   * names to be notified about, an Observer is created encapsulating\n   * the Mediator instance's\n   * {@link puremvc.Mediator#handleNotification handleNotification}\n   * method and registering it as an Observer for all Notifications the\n   * Mediator is interested in.\n   *\n   * @param {puremvc.Mediator}\n   *  a reference to the Mediator instance\n   */\n  registerMediator (mediator) {\n    if (this.mediatorMap.has(mediator.getMediatorName())) {\n      return\n    }\n\n    mediator.initializeNotifier(this.multitonKey)\n    // register the mediator for retrieval by name\n    this.mediatorMap.set(mediator.getMediatorName(), mediator)\n\n    // get notification interests if any\n    const interests = mediator.listNotificationInterests()\n\n    // register mediator as an observer for each notification\n    if (interests.length > 0) {\n      // create observer referencing this mediators handleNotification method\n      const observer = new Observer(mediator.handleNotification, mediator)\n      for (let i = 0; i < interests.length; i++) {\n        this.registerObserver(interests[i], observer)\n      }\n    }\n\n    mediator.onRegister()\n  }\n\n  /**\n   * Retrieve a Mediator from the View\n   *\n   * @param {string} mediatorName\n   *  The name of the Mediator instance to retrieve\n   * @return {puremvc.Mediator}\n   *  The Mediator instance previously registered with the given mediatorName\n   */\n  retrieveMediator (mediatorName) {\n    return this.mediatorMap.get(mediatorName)\n  }\n\n  /**\n   * Remove a Mediator from the View.\n   *\n   * @param {string} mediatorName\n   *  Name of the Mediator instance to be removed\n   * @return {puremvc.Mediator}\n   *  The Mediator that was removed from the View\n   */\n  removeMediator (mediatorName) {\n    const mediator = this.mediatorMap.get(mediatorName)\n    if (mediator) {\n      // for every notification the mediator is interested in...\n      const interests = mediator.listNotificationInterests()\n      for (let i = 0; i < interests.length; i++) {\n        // remove the observer linking the mediator to the notification\n        // interest\n        this.removeObserver(interests[i], mediator)\n      }\n\n      // remove the mediator from the map\n      this.mediatorMap.delete(mediatorName)\n\n      // alert the mediator that it has been removed\n      mediator.onRemove()\n    }\n\n    return mediator\n  }\n\n  /**\n   * Check if a Mediator is registered or not.\n   *\n   * @param {string} mediatorName\n   * @return {boolean}\n   *  Whether a Mediator is registered with the given mediatorname\n   */\n  hasMediator (mediatorName) {\n    return this.mediatorMap.has(mediatorName)\n  }\n\n  /**\n   * Remove a View instance\n   *\n   * @return {void}\n   */\n  static removeView = function (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'View instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/core/View.js","/**\n * Created by sargis on 7/3/17.\n */\nimport Observer from '../patterns/observer/Observer'\nimport View from './View'\n/**\n * @constructor\n * This Controller implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static #getInstance factory method,\n * passing the unique key for this instance to it.\n * @param {string} key\n * @throws {Error}\n *  If instance for this Multiton key has already been constructed\n */\nexport default class Controller {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Controller.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.commandMap = new Map()\n    this.initializeController()\n  }\n\n  /**\n   * The Controllers multiton factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  A Controller's multiton key\n   * @return {puremvc.Controller}\n   *  the Multiton instance of Controller\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new Controller(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * @protected\n   *\n   * Initialize the multiton Controller instance.\n   *\n   * Called automatically by the constructor.\n   *\n   * Note that if you are using a subclass of View\n   * in your application, you should *also* subclass Controller\n   * and override the initializeController method in the\n   * following way.\n   *\n   * @return {void}\n   */\n  initializeController () {\n    this.view = View.getInstance(this.multitonKey)\n  }\n\n  /**\n   * If a SimpleCommand or MacroCommand has previously been registered to handle\n   * the given Notification then it is executed.\n   *\n   * @param {puremvc.Notification} note\n   * @return {void}\n   */\n  executeCommand (note) {\n    const commandClassRef = this.commandMap.get(note.getName())\n    if (!commandClassRef) { return }\n    // eslint-disable-next-line\n    const commandInstance = new commandClassRef()\n    commandInstance.initializeNotifier(this.multitonKey)\n    commandInstance.execute(note)\n  }\n\n  /**\n   * Register a particular SimpleCommand or MacroCommand class as the handler for\n   * a particular Notification.\n   *\n   * If an command already been registered to handle Notifications with this name,\n   * it is no longer used, the new command is used instead.\n   *\n   * The Observer for the new command is only created if this the irst time a\n   * command has been regisered for this Notification name.\n   *\n   * @param {string} notificationName\n   *  the name of the Notification\n   * @param {Function} commandClassRef\n   *  a command constructor\n   * @return {void}\n   */\n  registerCommand (notificationName, commandClassRef) {\n    if (!this.commandMap.has(notificationName)) {\n      this.view.registerObserver(notificationName, new Observer(this.executeCommand, this))\n    }\n    this.commandMap.set(notificationName, commandClassRef)\n  }\n\n  /**\n   * Check if a command is registered for a given Notification\n   *\n   * @param {string} notificationName\n   * @return {boolean}\n   *  whether a Command is currently registered for the given notificationName.\n   */\n  hasCommand (notificationName) {\n    return this.commandMap.has(notificationName)\n  }\n\n  /**\n   * Remove a previously registered command to\n   * {@link puremvc.Notification Notification}\n   * mapping.\n   *\n   * @param {string} notificationName\n   *  the name of the Notification to remove the command mapping for\n   * @return {void}\n   */\n  removeCommand (notificationName) {\n    if (this.hasCommand(notificationName)) {\n      this.view.removeObserver(notificationName, this)\n      this.commandMap.delete(notificationName)\n    }\n  }\n\n  /**\n   * @static\n   * Remove a Controller instance.\n   *\n   * @param {string} key\n   *  multitonKey of Controller instance to remove\n   * @return {void}\n   */\n  static removeController (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'controller key for this Multiton key already constructed'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/core/Controller.js","/**\n * Created by sargis on 7/3/17.\n */\n/** A Multiton Model implementation.\n *\n * In PureMVC, the Model class provides\n * access to model objects (Proxies) by named lookup.\n *\n * The Model assumes these responsibilities:\n *\n * - Maintain a cache of {@link puremvc.Proxy Proxy}\n *   instances.\n * - Provide methods for registering, retrieving, and removing\n *   {@link puremvc.Proxy Proxy} instances.\n *\n * Your application must register\n * {@link puremvc.Proxy Proxy} instances with the Model.\n * Typically, you use a\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or\n * {@link puremvc.MacroCommand MacroCommand}\n * to create and register Proxy instances once the Facade has initialized the\n * *Core* actors.\n *\n * This Model implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the\n * {@link #getInstance static Multiton Factory method}\n * @constructor\n * @param {string} key\n *  The Models multiton key\n * @throws {Error}\n *  An error is thrown if this multitons key is already in use by another instance\n */\nexport default class Model {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Model.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.proxyMap = new Map()\n    this.initializeModel()\n  }\n\n  /**\n   * Model Multiton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key for the Model to retrieve\n   * @return {puremvc.Model}\n   *  the instance for this Multiton key\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new Model(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * Initialize the Model instance.\n   *\n   * Called automatically by the constructor, this\n   * is your opportunity to initialize the Singleton\n   * instance in your subclass without overriding the\n   * constructor.\n   *\n   * @return void\n   */\n  initializeModel () {}\n\n  /**\n   * Register a Proxy with the Model\n   * @param {puremvc.Proxy}\n   */\n  registerProxy (proxy) {\n    proxy.initializeNotifier(this.multitonKey)\n    this.proxyMap.set(proxy.getProxyName(), proxy)\n    proxy.onRegister()\n  }\n\n  /**\n   * Retrieve a Proxy from the Model\n   *\n   * @param {string} proxyName\n   * @return {puremvc.Proxy}\n   *  The Proxy instance previously registered with the provided proxyName\n   */\n  retrieveProxy (proxyName) {\n    return this.proxyMap.get(proxyName)\n  }\n\n  /**\n   * Check if a Proxy is registered\n   * @param {string} proxyName\n   * @return {boolean}\n   *  whether a Proxy is currently registered with the given proxyName.\n   */\n  hasProxy (proxyName) {\n    return this.proxyMap.has(proxyName)\n  }\n\n  /**\n   * Remove a Proxy from the Model.\n   *\n   * @param {string} proxyName\n   *  The name of the Proxy instance to remove\n   * @return {puremvc.Proxy}\n   *  The Proxy that was removed from the Model\n   */\n  removeProxy (proxyName) {\n    if (this.proxyMap.has(proxyName)) {\n      const proxy = this.proxyMap.get(proxyName)\n      proxy.onRemove()\n      this.proxyMap.delete(proxyName)\n      return proxy\n    }\n    return null\n  }\n\n  /**\n   * @static\n   * Remove a Model instance.\n   *\n   * @param {string} key\n   * @return {void}\n   */\n  static removeModel (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'Model instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/core/Model.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n/**\n *\n * SimpleCommands encapsulate the business logic of your application. Your\n * subclass should override the #execute method where your business logic will\n * handle the\n * {@link puremvc.Notification Notification}\n *\n * Take a look at\n * {@link puremvc.Facade#registerCommand Facade's registerCommand}\n * or {@link puremvc.Controller#registerCommand Controllers registerCommand}\n * methods to see how to add commands to your application.\n *\n * @constructor\n */\nexport default class SimpleCommand extends Notifier {\n  /**\n   * Fulfill the use-case initiated by the given Notification\n   *\n   * In the Command Pattern, an application use-case typically begins with some\n   * user action, which results in a Notification is handled by the business logic\n   * in the #execute method of a command.\n   *\n   * @param {puremvc.Notification} notification\n   *  The notification to handle.\n   * @return {void}\n   */\n  execute (notification) { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/command/SimpleCommand.js","/**\n * Created by sargis on 7/4/17.\n */\n\nimport Controller from '../../core/Controller'\nimport Model from '../../core/Model'\nimport View from '../../core/View'\nimport Notification from '../observer/Notification'\n\n/**\n * Facade exposes the functionality of the Controller, Model and View\n * actors to client facing code.\n *\n * This Facade implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Factory method,\n * passing the unique key for this instance to #getInstance\n *\n * @constructor\n * @param {string} key\n *  The multiton key to use to retrieve the Facade instance.\n * @throws {Error}\n *  If an attempt is made to instantiate Facade directly\n */\nexport default class Facade {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Facade.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.initializeNotifier(key)\n    this.initializeFacade()\n  }\n\n  /**\n   * Facade Multiton Factory method.\n   * Note that this method will return null if supplied a\n   * null or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key use to retrieve a particular Facade instance\n   * @return {puremvc.Facade}\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!Facade.instanceMap.has(key)) {\n      Facade.instanceMap.set(key, new Facade(key))\n    }\n\n    return Facade.instanceMap.get(key)\n  }\n\n  /**\n   * Initialize the Multiton Facade instance.\n   *\n   * Called automatically by the constructor. Override in your subclass to any\n   * subclass specific initializations. Be sure to call the 'super'\n   * initializeFacade method, though\n   *\n   * @protected\n   * @return {void}\n   */\n  initializeFacade () {\n    this.initializeModel()\n    this.initializeController()\n    this.initializeView()\n  }\n\n  /**\n   * Initialize the {@link puremvc.Controller Controller}.\n   *\n   * Called by the #initializeFacade method.\n   *\n   * Override this method in your subclass of Facade\n   * if one or both of the following are true:\n\n   * - You wish to initialize a different Controller\n   * - You have\n   * {@link puremvc.SimpleCommand SimpleCommand}s\n   * or {@link puremvc.MacroCommand MacroCommand}s\n   * to register with the Controllerat startup.\n   *\n   * If you don't want to initialize a different Controller,\n   * call the 'super' initializeControlle method at the beginning of your\n   * method, then register commands.\n   *\n   * @protected\n   * @return {void}\n   */\n  initializeController () {\n    if (this.controller) { return }\n    this.controller = Controller.getInstance(this.multitonKey)\n  }\n\n  /**\n   * @protected\n   * Initialize the {@link puremvc.Model Model};\n   *\n   * Called by the #initializeFacade method.\n   * Override this method in your subclass of Facade if one of the following are\n   * true:\n   *\n   * - You wish to initialize a different Model.\n   *\n   * - You have {@link puremvc.Proxy Proxy}s to\n   *   register with the Model that do not retrieve a reference to the Facade at\n   *   construction time.\n   *\n   * If you don't want to initialize a different Model\n   * call 'super' #initializeModel at the beginning of your method, then register\n   * Proxys.\n   *\n   * Note: This method is *rarely* overridden; in practice you are more\n   * likely to use a command to create and registerProxys with the Model>,\n   * since Proxys with mutable data will likely\n   * need to send Notifications and thus will likely want to fetch a reference to\n   * the Facade during their construction.\n   *\n   * @return {void}\n   */\n  initializeModel () {\n    if (this.model) { return }\n    this.model = Model.getInstance(this.multitonKey)\n  }\n\n  /**\n   * @protected\n   *\n   * Initialize the {@link puremvc.View View}.\n   *\n   * Called by the #initializeFacade method.\n   *\n   * Override this method in your subclass of Facade if one or both of the\n   * following are true:\n   *\n   * - You wish to initialize a different View.\n   * - You have Observers to register with the View\n   *\n   * If you don't want to initialize a different View\n   * call 'super' #initializeView at the beginning of your\n   * method, then register Mediator instances.\n   *\n   * Note: This method is *rarely* overridden; in practice you are more\n   * likely to use a command to create and register Mediators\n   * with the View, since Mediator instances will need to send\n   * Notifications and thus will likely want to fetch a reference\n   * to the Facade during their construction.\n   * @return {void}\n   */\n  initializeView () {\n    if (this.view) { return }\n    this.view = View.getInstance(this.multitonKey)\n  }\n\n  /**\n   * Register a command with the Controller by Notification name\n   * @param {string} notificationName\n   *  The name of the Notification to associate the command with\n   * @param {Function} commandClassRef\n   *  A reference ot the commands constructor.\n   * @return {void}\n   */\n  registerCommand (notificationName, commandClassRef) {\n    this.controller.registerCommand(notificationName, commandClassRef)\n  }\n\n  /**\n   * Remove a previously registered command to Notification mapping from the\n   * {@link puremvc.Controller#removeCommand Controller}\n   * @param {string} notificationName\n   *  The name of the the Notification to remove from the command mapping for.\n   * @return {void}\n   */\n  removeCommand (notificationName) {\n    this.controller.removeCommand(notificationName)\n  }\n\n  /**\n   * Check if a command is registered for a given notification.\n   *\n   * @param {string} notificationName\n   *  A Notification name\n   * @return {boolean}\n   *  Whether a comman is currently registered for the given notificationName\n   */\n  hasCommand (notificationName) {\n    return this.controller.hasCommand(notificationName)\n  }\n\n  /**\n   * Register a Proxy with the {@link puremvc.Model#registerProxy Model}\n   * by name.\n   *\n   * @param {puremvc.Proxy} proxy\n   *  The Proxy instance to be registered with the Model.\n   * @return {void}\n   */\n  registerProxy (proxy) {\n    this.model.registerProxy(proxy)\n  }\n\n  /**\n   * Retrieve a Proxy from the Model\n   *\n   * @param {string} proxyName\n   * @return {puremvc.Proxy}\n   */\n  retrieveProxy (proxyName) {\n    return this.model.retrieveProxy(proxyName)\n  }\n\n  /**\n   * Remove a Proxy from the Model by name\n   * @param {string} proxyName\n   *  The name of the Proxy\n   * @return {puremvc.Proxy}\n   *  The Proxy that was removed from the Model\n   */\n  removeProxy (proxyName) {\n    if (this.model) {\n      return this.model.removeProxy(proxyName)\n    }\n    return null\n  }\n\n  /**\n   * Check it a Proxy is registered.\n   * @param {string} proxyName\n   *  A Proxy name\n   * @return {boolean}\n   *  Whether a Proxy is currently registered with the given proxyName\n   */\n  hasProxy (proxyName) {\n    return this.model.hasProxy(proxyName)\n  }\n\n  /**\n   * Register a Mediator with with the View.\n   *\n   * @param {puremvc.Mediator} mediator\n   *  A reference to the Mediator to register\n   * @return {void}\n   */\n  registerMediator (mediator) {\n    this.view.registerMediator(mediator)\n  }\n\n  /**\n   * Retrieve a Mediator from the View by name\n   *\n   * @param {string} mediatorName\n   *  The Mediators name\n   * @return {puremvc.Mediator}\n   *  The retrieved Mediator\n   */\n  retrieveMediator (mediatorName) {\n    return this.view.retrieveMediator(mediatorName)\n  }\n\n  /**\n   * Remove a Mediator from the View.\n   *\n   * @param {string} mediatorName\n   *  The name of the Mediator to remove.\n   * @return {puremvc.Mediator}\n   *  The removed Mediator\n   */\n  removeMediator (mediatorName) {\n    return this.view.removeMediator(mediatorName)\n  }\n\n  /**\n   * Check if a Mediator is registered or not.\n   *\n   * @param {string} mediatorName\n   *  A Mediator name\n   * @return {boolean}\n   *  Whether a Mediator is registered with the given mediatorName\n   */\n  hasMediator (mediatorName) {\n    return this.view.hasMediator(mediatorName)\n  }\n\n  /**\n   * Create and send a\n   * {@link puremvc.Notification Notification}\n   *\n   * Keeps us from having to construct new Notification instances in our\n   * implementation\n   *\n   * @param {string} notificationName\n   *  The name of the Notification to send\n   * @param {Object} [body]\n   *  The body of the notification\n   * @param {string} [type]\n   *  The type of the notification\n   * @return {void}\n   */\n  sendNotification (notificationName, body, type) {\n    this.notifyObservers(new Notification(notificationName, body, type))\n  }\n\n  /**\n   * Notify {@link puremvc.Observer Observer}s\n   *\n   * This method is left public mostly for backward compatibility, and to allow\n   * you to send custom notification classes using the facade.\n   *\n   * Usually you should just call sendNotification and pass the parameters, never\n   * having to construct the notification yourself.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to send\n   * @return {void}\n   */\n  notifyObservers (notification) {\n    this.view.notifyObservers(notification)\n  }\n\n  /**\n   * Initialize the Facades Notifier capabilities by setting the Multiton key for\n   * this facade instance.\n   *\n   * Not called directly, but instead from the constructor when #getInstance is\n   * invoked. It is necessary to be public in order to implement Notifier\n   *\n   * @param {string} key\n   * @return {void}\n   */\n  initializeNotifier (key) {\n    this.multitonKey = key\n  }\n\n  /**\n   * Check if a *Core* is registered or not\n   *\n   * @static\n   * @param {string} key\n   *  The multiton key for the *Core* in question\n   * @return {boolean}\n   *  Whether a *Core* is registered with the given key\n   */\n  static hasCore (key) {\n    return this.instanceMap.has(key)\n  }\n\n  /**\n   * Remove a *Core*\n   *\n   * Remove the Model, View, Controller and Facade for a given key.\n   *\n   * @static\n   * @param {string} key\n   * @return {void}\n   */\n  static removeCore (key) {\n    if (!this.instanceMap.has(key)) { return }\n    Model.removeModel(key)\n    View.removeView(key)\n    Controller.removeController(key)\n    delete this.instanceMap[key]\n  }\n}\n\nconst MULTITON_MSG = 'Facade instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/facade/Facade.js","/**\n * Created by sargis on 7/4/17.\n */\n/**\n * A base Notification implementation.\n *\n * PureMVC does not rely upon underlying event models such as the one provided\n * with the DOM or other browser centric W3C event models.\n *\n * The Observer Pattern as implemented within PureMVC exists to support\n * event-driven communication between the application and the actors of the MVC\n * triad.\n *\n * Notifications are not meant to be a replacement for events in the browser.\n * Generally, Mediator implementors place event listeners on their view\n * components, which they then handle in the usual way. This may lead to the\n * broadcast of Notifications to trigger commands or to communicate with other\n * Mediators. {@link puremvc.Proxy Proxy},\n * {@link puremvc.SimpleCommand SimpleCommand}\n * and {@link puremvc.MacroCommand MacroCommand}\n * instances communicate with each other and\n * {@link puremvc.Mediator Mediator}s\n * by broadcasting Notifications.\n *\n * A key difference between browser events and PureMVC Notifications is that\n * events follow the 'Chain of Responsibility' pattern, 'bubbling' up the\n * display hierarchy until some parent component handles the event, while\n * PureMVC Notification follow a 'Publish/Subscribe' pattern. PureMVC classes\n * need not be related to each other in a parent/child relationship in order to\n * communicate with one another using Notifications.\n *\n * @constructor\n * @param {string} name\n *  The Notification name\n * @param {Object} [body]\n *  The Notification body\n * @param {Object} [type]\n *  The Notification type\n */\nexport default class Notification {\n  constructor (name, body, type) {\n    this.name = name\n    this.body = body\n    this.type = type\n  }\n\n  /**\n   * Get the name of the Notification instance\n   *\n   * @return {string}\n   *  The name of the Notification instance\n   */\n  getName () {\n    return this.name\n  }\n\n  /**\n   * Set this Notifications body.\n   * @param {Object} body\n   * @return {void}\n   */\n  setBody (body) {\n    this.body = body\n  }\n\n  /**\n   * Get the Notification body.\n   *\n   * @return {Object}\n   */\n  getBody () {\n    return this.body\n  }\n\n  /**\n   * Set the type of the Notification instance.\n   *\n   * @param {Object} type\n   * @return {void}\n   */\n  setType (type) {\n    this.type = type\n  }\n\n  /**\n   * Get the type of the Notification instance.\n   *\n   * @return {Object}\n   */\n  getType () {\n    return this.type\n  }\n\n  /**\n   * Get a string representation of the Notification instance\n   *\n   * @return {string}\n   */\n  toString () {\n    let msg = 'Notification Name: ' + this.getName()\n    msg += '\\nBody:' + (this.body ? 'null' : this.body.toString())\n    msg += '\\nType:' + (this.type ? 'null' : this.type)\n    return msg\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/observer/Notification.js","import Controller from './com/koreez/puremvc/core/Controller'\nimport Model from './com/koreez/puremvc/core/Model'\nimport View from './com/koreez/puremvc/core/View'\nimport MacroCommand from './com/koreez/puremvc/patterns/command/MacroCommand'\nimport SimpleCommand from './com/koreez/puremvc/patterns/command/SimpleCommand'\nimport Facade from './com/koreez/puremvc/patterns/facade/Facade'\nimport Mediator from './com/koreez/puremvc/patterns/mediator/Mediator'\nimport Notification from './com/koreez/puremvc/patterns/observer/Notification'\nimport Notifier from './com/koreez/puremvc/patterns/observer/Notifier'\nimport Observer from './com/koreez/puremvc/patterns/observer/Observer'\nimport Proxy from './com/koreez/puremvc/patterns/proxy/Proxy'\n\nexport {\n  Controller,\n  Model,\n  View,\n  MacroCommand,\n  SimpleCommand,\n  Facade,\n  Mediator,\n  Notification,\n  Notifier,\n  Observer,\n  Proxy\n}\n\nconst PureMVC = {}\nPureMVC.Controller = Controller\nPureMVC.Model = Model\nPureMVC.View = View\nPureMVC.MacroCommand = MacroCommand\nPureMVC.SimpleCommand = SimpleCommand\nPureMVC.Facade = Facade\nPureMVC.Mediator = Mediator\nPureMVC.Notification = Notification\nPureMVC.Notifier = Notifier\nPureMVC.Observer = Observer\nPureMVC.Proxy = Proxy\n\nexport default PureMVC\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","/**\n * Created by sargis on 7/4/17.\n */\nimport SimpleCommand from './SimpleCommand'\n/**\n * A base command implementation that executes other commands, such as\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or {@link puremvc.MacroCommand MacroCommand}\n * subclasses.\n *\n * A MacroCommand maintains an list of\n * command constructor references called *SubCommands*.\n *\n * When #execute is called, the MacroCommand\n * instantiates and calls #execute on each of its *SubCommands* in turn.\n * Each *SubCommand* will be passed a reference to the original\n * {@link puremvc.Notification Notification}\n * that was passed to the MacroCommands #execute method\n *\n * Unlike {@link puremvc.SimpleCommand SimpleCommand},\n * your subclass should not override #execute but instead, should\n * override the #initializeMacroCommand method, calling #addSubCommand once for\n * each *SubCommand* to be executed.\n *\n * If your subclass does define a constructor, be sure to call \"super\"\n *\n * @constructor\n */\nexport default class MacroCommand extends SimpleCommand {\n  constructor () {\n    super()\n    this.subCommands = []\n    this.initializeMacroCommand()\n  }\n\n  /**\n   * @protected\n   * Initialize the MacroCommand.\n   *\n   * In your subclass, override this method to\n   * initialize the MacroCommand's *SubCommand*\n   * list with command class references\n   *\n   * Note that *SubCommand*s may be any command implementor,\n   * MacroCommands or SimpleCommands are both acceptable.\n   * @return {void}\n   */\n  initializeMacroCommand () {}\n\n  /**\n   * @protected\n   * Add a *SubCommand*\n   *\n   * The *SubCommand*s will be called in First In / First Out (FIFO) order\n   * @param {Function} commandClassRef\n   *  A reference to a subclassed SimpleCommand or MacroCommand constructor\n   */\n  addSubCommand (subCommand) {\n    this.subCommands.push(subCommand)\n  }\n\n  /**\n   * Execute this MacroCommands *SubCommands*\n   *\n   * The *SubCommand*s will be called in First In / First Out (FIFO) order\n   * @param {puremvc.Notification} note\n   *  The Notification object to be passed to each *SubCommand*\n   */\n  execute (note) {\n    while (this.subCommands.length > 0) {\n      const ref = this.subCommands.shift()\n      // eslint-disable-next-line new-cap\n      const cmd = new ref()\n      cmd.initializeNotifier(this.multitonKey)\n      cmd.execute(note)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/command/MacroCommand.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n/**\n * A base Mediator implementation.\n *\n * In PureMVC, Mediator classes are used to mediate communication between a view\n * component and the rest of the application.\n *\n * A Mediator should listen to its view components for events, and handle them\n * by sending notifications (to be handled by other Mediators,\n * {@link puremvc.SimpleCommand SimpleCommands}\n * or\n * {@link puremvc.MacroCommand MacroCommands})\n * or passing data from the view component directly to a\n * {@link puremvc.Proxy Proxy}, such as submitting\n * the contents of a form to a service.\n *\n * Mediators should not perform business logic, maintain state or other\n * information for its view component, or break the encapsulation of the view\n * component by manipulating the view component's children. It should only call\n * methods or set properties on the view component.\n *\n * The view component should encapsulate its own behavior and implementation by\n * exposing methods and properties that the Mediator can call without having to\n * know about the view component's children.\n *\n * @constructor\n * @param {string} [mediatorName]\n *  The Mediators name. The Mediators static #NAME value is used by default\n * @param {Object} [viewComponent]\n *  The Mediators {@link #setViewComponent viewComponent}.\n */\nexport default class Mediator extends Notifier {\n  constructor (mediatorName, viewComponent) {\n    super()\n    this.mediatorName = mediatorName || NAME\n    this.viewComponent = viewComponent\n  }\n\n  /**\n   * Get the name of the Mediator\n   *\n   * @return {string}\n   *  The Mediator name\n   */\n  getMediatorName () {\n    return this.mediatorName\n  }\n\n  /**\n   * Set the Mediators view component. This could\n   * be a HTMLElement, a bespoke UiComponent wrapper\n   * class, a MooTools Element, a jQuery result or a\n   * css selector, depending on which DOM abstraction\n   * library you are using.\n   *\n   *\n   * @param {Object} the view component\n   * @return {void}\n   */\n  setViewComponent (viewComponent) {\n    this.viewComponent = viewComponent\n  }\n\n  /**\n   * Get the Mediators view component.\n   *\n   * Additionally, an optional explicit getter can be\n   * be defined in the subclass that defines the\n   * view components, providing a more semantic interface\n   * to the Mediator.\n   *\n   * This is different from the AS3 implementation in\n   * the sense that no casting is required from the\n   * object supplied as the view component.\n   *\n   * @return {Object}\n   *  The view component\n   */\n  getViewComponent () {\n    return this.viewComponent\n  }\n\n  /**\n   * List the Notification names this Mediator is interested\n   * in being notified of.\n   *\n   * @return {Array}\n   *  The list of Notification names.\n   */\n  listNotificationInterests () {\n    return []\n  }\n\n  /**\n   * Handle Notifications.\n   *\n   * Typically this will be handled in a switch statement\n   * with one 'case' entry per Notification the Mediator\n   * is interested in\n   *\n   * @param {puremvc.Notification} notification\n   * @return {void}\n   */\n  handleNotification (notification) {\n  }\n\n  /**\n   * Called by the View when the Mediator is registered\n   * @return {void}\n   */\n  onRegister () {\n  }\n\n  /**\n   * Called by the View when the Mediator is removed\n   */\n  onRemove () {\n  }\n}\n\nconst NAME = 'Mediator'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/mediator/Mediator.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n\n/**\n * A base Proxy implementation.\n *\n * In PureMVC, Proxy classes are used to manage parts of the application's data\n * model.\n *\n * A Proxy might simply manage a reference to a local data object, in which case\n * interacting with it might involve setting and getting of its data in\n * synchronous fashion.\n *\n * Proxy classes are also used to encapsulate the application's interaction with\n * remote services to save or retrieve data, in which case, we adopt an\n * asyncronous idiom; setting data (or calling a method) on the Proxy and\n * listening for a\n * {@link puremvc.Notification Notification}\n * to be sent  when the Proxy has retrieved the data from the service.\n *\n *\n * @param {string} [proxyName]\n *  The Proxy's name. If none is provided, the Proxy will use its constructors\n *  NAME property.\n * @param {Object} [data]\n *  The Proxy's data object\n * @constructor\n */\nexport default class Proxy extends Notifier {\n  constructor (proxyName, data) {\n    super()\n    this.proxyName = proxyName || NAME\n    if (data) {\n      this.setData(data)\n    }\n  }\n\n  /**\n   * Get the Proxy's name.\n   *\n   * @return {string}\n   */\n  getProxyName () {\n    return this.proxyName\n  }\n\n  /**\n   * Set the Proxy's data object\n   *\n   * @param {Object} data\n   * @return {void}\n   */\n  setData (data) {\n    this.data = data\n  }\n\n  /**\n   * Get the Proxy's data object\n   *\n   * @return {Object}\n   */\n  getData () {\n    return this.data\n  }\n\n  /**\n   * Called by the {@link puremvc.Model Model} when\n   * the Proxy is registered.\n   *\n   * @return {void}\n   */\n  onRegister () {\n\n  }\n\n  /**\n   * Called by the {@link puremvc.Model Model} when\n   * the Proxy is removed.\n   *\n   * @return {void}\n   */\n  onRemove () {\n  }\n}\n\nconst NAME = 'Proxy'\n\n\n\n// WEBPACK FOOTER //\n// ./com/koreez/puremvc/patterns/proxy/Proxy.js"],"sourceRoot":""}