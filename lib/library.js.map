{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 397f06da42b908482c7a","webpack:///./src/com/koreez/puremvc/patterns/observer/Notifier.js","webpack:///./src/com/koreez/puremvc/patterns/observer/Observer.js","webpack:///./src/com/koreez/puremvc/core/View.js","webpack:///./src/com/koreez/puremvc/core/Controller.js","webpack:///./src/com/koreez/puremvc/core/Model.js","webpack:///./src/com/koreez/puremvc/patterns/command/SimpleCommand.js","webpack:///./src/com/koreez/puremvc/patterns/facade/Facade.js","webpack:///./src/com/koreez/puremvc/patterns/observer/Notification.js","webpack:///./src/index.js","webpack:///./src/com/koreez/puremvc/patterns/command/MacroCommand.js","webpack:///./src/com/koreez/puremvc/patterns/mediator/Mediator.js","webpack:///./src/com/koreez/puremvc/patterns/proxy/Proxy.js"],"names":["Notifier","key","multitonKey","facade","getFacade","notificationName","body","type","sendNotification","Error","MULTITON_MSG","getInstance","Observer","notifyMethod","notifyContext","setNotifyMethod","setNotifyContext","notify","context","notification","getNotifyMethod","call","getNotifyContext","object","View","instanceMap","has","mediatorMap","Map","observerMap","initializeView","observer","get","push","set","getName","i","observers","observersBuffer","length","notifyObserver","compareNotifyContext","splice","delete","mediator","getMediatorName","initializeNotifier","interests","listNotificationInterests","handleNotification","registerObserver","onRegister","mediatorName","removeObserver","onRemove","removeView","Controller","commandMap","initializeController","view","note","commandClassRef","commandInstance","execute","executeCommand","hasCommand","Model","proxyMap","initializeModel","proxy","getProxyName","proxyName","SimpleCommand","Facade","initializeFacade","controller","model","registerCommand","removeCommand","registerProxy","retrieveProxy","removeProxy","hasProxy","registerMediator","retrieveMediator","removeMediator","hasMediator","notifyObservers","removeModel","removeController","Notification","name","msg","toString","MacroCommand","Mediator","Proxy","PureMVC","subCommands","initializeMacroCommand","subCommand","ref","shift","cmd","viewComponent","NAME","data","setData"],"mappings":"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","file":"library.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 397f06da42b908482c7a","/**\n * Created by sargis on 7/4/17.\n */\nimport Facade from '../facade/Facade'\n/**\n * A Base Notifier implementation.\n *\n * {@link puremvc.MacroCommand MacroCommand},\n * {@link puremvc.SimpleCommand SimpleCommand},\n * {@link puremvc.Mediator Mediator} and\n * {@link puremvc.Proxy Proxy}\n * all have a need to send Notifications\n *\n * The Notifier interface provides a common method called #sendNotification that\n * relieves implementation code of the necessity to actually construct\n * Notifications.\n *\n * The Notifier class, which all of the above mentioned classes\n * extend, provides an initialized reference to the\n * {@link puremvc.Facade Facade}\n * Multiton, which is required for the convienience method\n * for sending Notifications but also eases implementation as these\n * classes have frequent\n * {@link puremvc.Facade Facade} interactions\n * and usually require access to the facade anyway.\n *\n * NOTE: In the MultiCore version of the framework, there is one caveat to\n * notifiers, they cannot send notifications or reach the facade until they\n * have a valid multitonKey.\n *\n * The multitonKey is set:\n *   - on a Command when it is executed by the Controller\n *   - on a Mediator is registered with the View\n *   - on a Proxy is registered with the Model.\n *\n * @constructor\n */\nexport default class Notifier {\n  /**\n   * Initialize this Notifier instance.\n   *\n   * This is how a Notifier gets its multitonKey.\n   * Calls to #sendNotification or to access the\n   * facade will fail until after this method\n   * has been called.\n   *\n   * Mediators, Commands or Proxies may override\n   * this method in order to send notifications\n   * or access the Multiton Facade instance as\n   * soon as possible. They CANNOT access the facade\n   * in their constructors, since this method will not\n   * yet have been called.\n   *\n   *\n   * @param {string} key\n   *  The Notifiers multiton key;\n   * @return {void}\n   */\n  initializeNotifier (key) {\n    this.multitonKey = key\n    this.facade = this.getFacade()\n  }\n\n  /**\n   * Create and send a Notification.\n   *\n   * Keeps us from having to construct new Notification instances in our\n   * implementation code.\n   *\n   * @param {string} notificationName\n   *  A notification name\n   * @param {Object} [body]\n   *  The body of the notification\n   * @param {string} [type]\n   *  The notification type\n   * @return {void}\n   */\n  sendNotification (notificationName, body, type) {\n    if (this.facade) {\n      this.facade.sendNotification(notificationName, body, type)\n    }\n  }\n\n  /**\n   * Retrieve the Multiton Facade instance\n   *\n   *\n   * @protected\n   * @return {puremvc.Facade}\n   */\n  getFacade () {\n    if (this.multitonKey === null) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    return Facade.getInstance(this.multitonKey)\n  }\n}\n\nconst MULTITON_MSG = 'multitonKey for this Notifier not yet initialized!'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/observer/Notifier.js","/**\n * Created by sargis on 7/4/17.\n */\n\n/**\n * A base Observer implementation.\n *\n * An Observer is an object that encapsulates information\n * about an interested object with a method that should\n * be called when a particular Notification is broadcast.\n *\n * In PureMVC, the Observer class assumes these responsibilities:\n *\n * - Encapsulate the notification (callback) method of the interested object.\n * - Encapsulate the notification context (this) of the interested object.\n * - Provide methods for setting the notification method and context.\n * - Provide a method for notifying the interested object.\n *\n *\n * The notification method on the interested object should take\n * one parameter of type Notification.\n *\n *\n * @param {Function} notifyMethod\n *  the notification method of the interested object\n * @param {Object} notifyContext\n *  the notification context of the interested object\n * @constructor\n */\nexport default class Observer {\n  constructor (notifyMethod, notifyContext) {\n    this.setNotifyMethod(notifyMethod)\n    this.setNotifyContext(notifyContext)\n  }\n\n  /**\n   * Set the Observers notification method.\n   *\n   * The notification method should take one parameter of type Notification\n   * @param {Function} notifyMethod\n   *  the notification (callback) method of the interested object.\n   * @return {void}\n   */\n  setNotifyMethod (notifyMethod) {\n    this.notify = notifyMethod\n  }\n\n  /**\n   * Set the Observers notification context.\n   *\n   * @param {Object} notifyContext\n   *  the notification context (this) of the interested object.\n   *\n   * @return {void}\n   */\n  setNotifyContext (notifyContext) {\n    this.context = notifyContext\n  }\n\n  /**\n   * Get the Function that this Observer will invoke when it is notified.\n   *\n   * @private\n   * @return {Function}\n   */\n  getNotifyMethod () {\n    return this.notify\n  }\n\n  /**\n   * Get the Object that will serve as the Observers callback execution context\n   *\n   * @private\n   * @return {Object}\n   */\n  getNotifyContext () {\n    return this.context\n  }\n\n  /**\n   * Notify the interested object.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to pass to the interested objects notification method\n   * @return {void}\n   */\n  notifyObserver (notification) {\n    this.getNotifyMethod().call(this.getNotifyContext(), notification)\n  }\n\n  /**\n   * Compare an object to this Observers notification context.\n   *\n   * @param {Object} object\n   *\n   * @return {boolean}\n   */\n  compareNotifyContext (object) {\n    return object === this.context\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/observer/Observer.js","/**\n * Created by sargis on 7/4/17.\n */\n\nimport Observer from '../patterns/observer/Observer'\n/**\n * This View implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Multiton\n * Factory #getInstance method.\n *\n * @param {string} key\n * @constructor\n * @throws {Error}\n *  if instance for this Multiton key has already been constructed\n */\nexport default class View {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (View.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.mediatorMap = new Map()\n    this.observerMap = new Map()\n    this.initializeView()\n  }\n\n  /**\n   * View Singleton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @return {puremvc.View}\n   *  The Singleton instance of View\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new View(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * @protected\n   * Initialize the Singleton View instance\n   *\n   * Called automatically by the constructor, this is your opportunity to\n   * initialize the Singleton instance in your subclass without overriding the\n   * constructor\n   *\n   * @return {void}\n   */\n  initializeView () {}\n\n  /**\n   * Register an Observer to be notified of Notifications with a given name\n   *\n   * @param {string} notificationName\n   *  The name of the Notifications to notify this Observer of\n   * @param {puremvc.Observer} observer\n   *  The Observer to register.\n   * @return {void}\n   */\n  registerObserver (notificationName, observer) {\n    if (this.observerMap.has(notificationName)) {\n      this.observerMap.get(notificationName).push(observer)\n    } else {\n      this.observerMap.set(notificationName, [observer])\n    }\n  }\n\n  /**\n   * Notify the Observersfor a particular Notification.\n   *\n   * All previously attached Observers for this Notification's\n   * list are notified and are passed a reference to the INotification in\n   * the order in which they were registered.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to notify Observers of\n   * @return {void}\n   */\n  notifyObservers (notification) {\n    // SIC\n    if (this.observerMap.has(notification.getName())) {\n      let i\n      const observers = this.observerMap.get(notification.getName())\n      const observersBuffer = []\n      let observer\n\n      for (i = 0; i < observers.length; ++i) {\n        observer = observers[i]\n        observersBuffer.push(observer)\n      }\n\n      for (i = 0; i < observersBuffer.length; ++i) {\n        observer = observersBuffer[i]\n        observer.notifyObserver(notification)\n      }\n    }\n  }\n\n  /**\n   * Remove the Observer for a given notifyContext from an observer list for\n   * a given Notification name\n   *\n   * @param {string} notificationName\n   *  Which observer list to remove from\n   * @param {Object} notifyContext\n   *  Remove the Observer with this object as its notifyContext\n   * @return {void}\n   */\n  removeObserver (notificationName, notifyContext) {\n    // SIC\n    const observers = this.observerMap.get(notificationName)\n    for (let i = 0; i < observers.length; i++) {\n      if (observers[i].compareNotifyContext(notifyContext) === true) {\n        observers.splice(i, 1)\n        break\n      }\n    }\n\n    if (observers.length === 0) {\n      this.observerMap.delete(notificationName)\n    }\n  }\n\n  /**\n   * Register a Mediator instance with the View.\n   *\n   * Registers the Mediator so that it can be retrieved by name,\n   * and further interrogates the Mediator for its\n   * {@link puremvc.Mediator#listNotificationInterests interests}.\n   *\n   * If the Mediator returns any Notification\n   * names to be notified about, an Observer is created encapsulating\n   * the Mediator instance's\n   * {@link puremvc.Mediator#handleNotification handleNotification}\n   * method and registering it as an Observer for all Notifications the\n   * Mediator is interested in.\n   *\n   * @param {puremvc.Mediator}\n   *  a reference to the Mediator instance\n   */\n  registerMediator (mediator) {\n    if (this.mediatorMap.has(mediator.getMediatorName())) {\n      return\n    }\n\n    mediator.initializeNotifier(this.multitonKey)\n    // register the mediator for retrieval by name\n    this.mediatorMap.set(mediator.getMediatorName(), mediator)\n\n    // get notification interests if any\n    const interests = mediator.listNotificationInterests()\n\n    // register mediator as an observer for each notification\n    if (interests.length > 0) {\n      // create observer referencing this mediators handleNotification method\n      const observer = new Observer(mediator.handleNotification, mediator)\n      for (let i = 0; i < interests.length; i++) {\n        this.registerObserver(interests[i], observer)\n      }\n    }\n\n    mediator.onRegister()\n  }\n\n  /**\n   * Retrieve a Mediator from the View\n   *\n   * @param {string} mediatorName\n   *  The name of the Mediator instance to retrieve\n   * @return {puremvc.Mediator}\n   *  The Mediator instance previously registered with the given mediatorName\n   */\n  retrieveMediator (mediatorName) {\n    return this.mediatorMap.get(mediatorName)\n  }\n\n  /**\n   * Remove a Mediator from the View.\n   *\n   * @param {string} mediatorName\n   *  Name of the Mediator instance to be removed\n   * @return {puremvc.Mediator}\n   *  The Mediator that was removed from the View\n   */\n  removeMediator (mediatorName) {\n    const mediator = this.mediatorMap.get(mediatorName)\n    if (mediator) {\n      // for every notification the mediator is interested in...\n      const interests = mediator.listNotificationInterests()\n      for (let i = 0; i < interests.length; i++) {\n        // remove the observer linking the mediator to the notification\n        // interest\n        this.removeObserver(interests[i], mediator)\n      }\n\n      // remove the mediator from the map\n      this.mediatorMap.delete(mediatorName)\n\n      // alert the mediator that it has been removed\n      mediator.onRemove()\n    }\n\n    return mediator\n  }\n\n  /**\n   * Check if a Mediator is registered or not.\n   *\n   * @param {string} mediatorName\n   * @return {boolean}\n   *  Whether a Mediator is registered with the given mediatorname\n   */\n  hasMediator (mediatorName) {\n    return this.mediatorMap.has(mediatorName)\n  }\n\n  /**\n   * Remove a View instance\n   *\n   * @return {void}\n   */\n  static removeView = function (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'View instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/core/View.js","/**\n * Created by sargis on 7/3/17.\n */\nimport Observer from '../patterns/observer/Observer'\nimport View from './View'\n/**\n * @constructor\n * This Controller implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static #getInstance factory method,\n * passing the unique key for this instance to it.\n * @param {string} key\n * @throws {Error}\n *  If instance for this Multiton key has already been constructed\n */\nexport default class Controller {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Controller.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.commandMap = new Map()\n    this.initializeController()\n  }\n\n  /**\n   * The Controllers multiton factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  A Controller's multiton key\n   * @return {puremvc.Controller}\n   *  the Multiton instance of Controller\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new Controller(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * @protected\n   *\n   * Initialize the multiton Controller instance.\n   *\n   * Called automatically by the constructor.\n   *\n   * Note that if you are using a subclass of View\n   * in your application, you should *also* subclass Controller\n   * and override the initializeController method in the\n   * following way.\n   *\n   * @return {void}\n   */\n  initializeController () {\n    this.view = View.getInstance(this.multitonKey)\n  }\n\n  /**\n   * If a SimpleCommand or MacroCommand has previously been registered to handle\n   * the given Notification then it is executed.\n   *\n   * @param {puremvc.Notification} note\n   * @return {void}\n   */\n  executeCommand (note) {\n    const commandClassRef = this.commandMap.get(note.getName())\n    if (!commandClassRef) { return }\n    // eslint-disable-next-line\n    const commandInstance = new commandClassRef()\n    commandInstance.initializeNotifier(this.multitonKey)\n    commandInstance.execute(note)\n  }\n\n  /**\n   * Register a particular SimpleCommand or MacroCommand class as the handler for\n   * a particular Notification.\n   *\n   * If an command already been registered to handle Notifications with this name,\n   * it is no longer used, the new command is used instead.\n   *\n   * The Observer for the new command is only created if this the irst time a\n   * command has been regisered for this Notification name.\n   *\n   * @param {string} notificationName\n   *  the name of the Notification\n   * @param {Function} commandClassRef\n   *  a command constructor\n   * @return {void}\n   */\n  registerCommand (notificationName, commandClassRef) {\n    if (!this.commandMap.has(notificationName)) {\n      this.view.registerObserver(notificationName, new Observer(this.executeCommand, this))\n    }\n    this.commandMap.set(notificationName, commandClassRef)\n  }\n\n  /**\n   * Check if a command is registered for a given Notification\n   *\n   * @param {string} notificationName\n   * @return {boolean}\n   *  whether a Command is currently registered for the given notificationName.\n   */\n  hasCommand (notificationName) {\n    return this.commandMap.has(notificationName)\n  }\n\n  /**\n   * Remove a previously registered command to\n   * {@link puremvc.Notification Notification}\n   * mapping.\n   *\n   * @param {string} notificationName\n   *  the name of the Notification to remove the command mapping for\n   * @return {void}\n   */\n  removeCommand (notificationName) {\n    if (this.hasCommand(notificationName)) {\n      this.view.removeObserver(notificationName, this)\n      this.commandMap.delete(notificationName)\n    }\n  }\n\n  /**\n   * @static\n   * Remove a Controller instance.\n   *\n   * @param {string} key\n   *  multitonKey of Controller instance to remove\n   * @return {void}\n   */\n  static removeController (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'controller key for this Multiton key already constructed'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/core/Controller.js","/**\n * Created by sargis on 7/3/17.\n */\n/** A Multiton Model implementation.\n *\n * In PureMVC, the Model class provides\n * access to model objects (Proxies) by named lookup.\n *\n * The Model assumes these responsibilities:\n *\n * - Maintain a cache of {@link puremvc.Proxy Proxy}\n *   instances.\n * - Provide methods for registering, retrieving, and removing\n *   {@link puremvc.Proxy Proxy} instances.\n *\n * Your application must register\n * {@link puremvc.Proxy Proxy} instances with the Model.\n * Typically, you use a\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or\n * {@link puremvc.MacroCommand MacroCommand}\n * to create and register Proxy instances once the Facade has initialized the\n * *Core* actors.\n *\n * This Model implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the\n * {@link #getInstance static Multiton Factory method}\n * @constructor\n * @param {string} key\n *  The Models multiton key\n * @throws {Error}\n *  An error is thrown if this multitons key is already in use by another instance\n */\nexport default class Model {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Model.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.multitonKey = key\n    this.proxyMap = new Map()\n    this.initializeModel()\n  }\n\n  /**\n   * Model Multiton Factory method.\n   * Note that this method will return null if supplied a null\n   * or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key for the Model to retrieve\n   * @return {puremvc.Model}\n   *  the instance for this Multiton key\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!this.instanceMap.has(key)) {\n      this.instanceMap.set(key, new Model(key))\n    }\n\n    return this.instanceMap.get(key)\n  }\n\n  /**\n   * Initialize the Model instance.\n   *\n   * Called automatically by the constructor, this\n   * is your opportunity to initialize the Singleton\n   * instance in your subclass without overriding the\n   * constructor.\n   *\n   * @return void\n   */\n  initializeModel () {}\n\n  /**\n   * Register a Proxy with the Model\n   * @param {puremvc.Proxy}\n   */\n  registerProxy (proxy) {\n    proxy.initializeNotifier(this.multitonKey)\n    this.proxyMap.set(proxy.getProxyName(), proxy)\n    proxy.onRegister()\n  }\n\n  /**\n   * Retrieve a Proxy from the Model\n   *\n   * @param {string} proxyName\n   * @return {puremvc.Proxy}\n   *  The Proxy instance previously registered with the provided proxyName\n   */\n  retrieveProxy (proxyName) {\n    return this.proxyMap.get(proxyName)\n  }\n\n  /**\n   * Check if a Proxy is registered\n   * @param {string} proxyName\n   * @return {boolean}\n   *  whether a Proxy is currently registered with the given proxyName.\n   */\n  hasProxy (proxyName) {\n    return this.proxyMap.has(proxyName)\n  }\n\n  /**\n   * Remove a Proxy from the Model.\n   *\n   * @param {string} proxyName\n   *  The name of the Proxy instance to remove\n   * @return {puremvc.Proxy}\n   *  The Proxy that was removed from the Model\n   */\n  removeProxy (proxyName) {\n    if (this.proxyMap.has(proxyName)) {\n      const proxy = this.proxyMap.get(proxyName)\n      proxy.onRemove()\n      this.proxyMap.delete(proxyName)\n      return proxy\n    }\n    return null\n  }\n\n  /**\n   * @static\n   * Remove a Model instance.\n   *\n   * @param {string} key\n   * @return {void}\n   */\n  static removeModel (key) {\n    this.instanceMap.delete(key)\n  }\n}\n\nconst MULTITON_MSG = 'Model instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/core/Model.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n/**\n *\n * SimpleCommands encapsulate the business logic of your application. Your\n * subclass should override the #execute method where your business logic will\n * handle the\n * {@link puremvc.Notification Notification}\n *\n * Take a look at\n * {@link puremvc.Facade#registerCommand Facade's registerCommand}\n * or {@link puremvc.Controller#registerCommand Controllers registerCommand}\n * methods to see how to add commands to your application.\n *\n * @constructor\n */\nexport default class SimpleCommand extends Notifier {\n  /**\n   * Fulfill the use-case initiated by the given Notification\n   *\n   * In the Command Pattern, an application use-case typically begins with some\n   * user action, which results in a Notification is handled by the business logic\n   * in the #execute method of a command.\n   *\n   * @param {puremvc.Notification} notification\n   *  The notification to handle.\n   * @return {void}\n   */\n  execute (notification) { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/command/SimpleCommand.js","/**\n * Created by sargis on 7/4/17.\n */\n\nimport Controller from '../../core/Controller'\nimport Model from '../../core/Model'\nimport View from '../../core/View'\nimport Notification from '../observer/Notification'\n\n/**\n * Facade exposes the functionality of the Controller, Model and View\n * actors to client facing code.\n *\n * This Facade implementation is a Multiton, so you should not call the\n * constructor directly, but instead call the static Factory method,\n * passing the unique key for this instance to #getInstance\n *\n * @constructor\n * @param {string} key\n *  The multiton key to use to retrieve the Facade instance.\n * @throws {Error}\n *  If an attempt is made to instantiate Facade directly\n */\nexport default class Facade {\n  static instanceMap = new Map()\n\n  constructor (key) {\n    if (Facade.instanceMap.has(key)) {\n      throw new Error(MULTITON_MSG)\n    }\n\n    this.initializeNotifier(key)\n    this.initializeFacade()\n  }\n\n  /**\n   * Facade Multiton Factory method.\n   * Note that this method will return null if supplied a\n   * null or undefined multiton key.\n   *\n   * @param {string} key\n   *  The multiton key use to retrieve a particular Facade instance\n   * @return {puremvc.Facade}\n   */\n  static getInstance (key) {\n    if (!key) { return null }\n\n    if (!Facade.instanceMap.has(key)) {\n      Facade.instanceMap.set(key, new Facade(key))\n    }\n\n    return Facade.instanceMap.get(key)\n  }\n\n  /**\n   * Initialize the Multiton Facade instance.\n   *\n   * Called automatically by the constructor. Override in your subclass to any\n   * subclass specific initializations. Be sure to call the 'super'\n   * initializeFacade method, though\n   *\n   * @protected\n   * @return {void}\n   */\n  initializeFacade () {\n    this.initializeModel()\n    this.initializeController()\n    this.initializeView()\n  }\n\n  /**\n   * Initialize the {@link puremvc.Controller Controller}.\n   *\n   * Called by the #initializeFacade method.\n   *\n   * Override this method in your subclass of Facade\n   * if one or both of the following are true:\n\n   * - You wish to initialize a different Controller\n   * - You have\n   * {@link puremvc.SimpleCommand SimpleCommand}s\n   * or {@link puremvc.MacroCommand MacroCommand}s\n   * to register with the Controllerat startup.\n   *\n   * If you don't want to initialize a different Controller,\n   * call the 'super' initializeControlle method at the beginning of your\n   * method, then register commands.\n   *\n   * @protected\n   * @return {void}\n   */\n  initializeController () {\n    if (this.controller) { return }\n    this.controller = Controller.getInstance(this.multitonKey)\n  }\n\n  /**\n   * @protected\n   * Initialize the {@link puremvc.Model Model};\n   *\n   * Called by the #initializeFacade method.\n   * Override this method in your subclass of Facade if one of the following are\n   * true:\n   *\n   * - You wish to initialize a different Model.\n   *\n   * - You have {@link puremvc.Proxy Proxy}s to\n   *   register with the Model that do not retrieve a reference to the Facade at\n   *   construction time.\n   *\n   * If you don't want to initialize a different Model\n   * call 'super' #initializeModel at the beginning of your method, then register\n   * Proxys.\n   *\n   * Note: This method is *rarely* overridden; in practice you are more\n   * likely to use a command to create and registerProxys with the Model>,\n   * since Proxys with mutable data will likely\n   * need to send Notifications and thus will likely want to fetch a reference to\n   * the Facade during their construction.\n   *\n   * @return {void}\n   */\n  initializeModel () {\n    if (this.model) { return }\n    this.model = Model.getInstance(this.multitonKey)\n  }\n\n  /**\n   * @protected\n   *\n   * Initialize the {@link puremvc.View View}.\n   *\n   * Called by the #initializeFacade method.\n   *\n   * Override this method in your subclass of Facade if one or both of the\n   * following are true:\n   *\n   * - You wish to initialize a different View.\n   * - You have Observers to register with the View\n   *\n   * If you don't want to initialize a different View\n   * call 'super' #initializeView at the beginning of your\n   * method, then register Mediator instances.\n   *\n   * Note: This method is *rarely* overridden; in practice you are more\n   * likely to use a command to create and register Mediators\n   * with the View, since Mediator instances will need to send\n   * Notifications and thus will likely want to fetch a reference\n   * to the Facade during their construction.\n   * @return {void}\n   */\n  initializeView () {\n    if (this.view) { return }\n    this.view = View.getInstance(this.multitonKey)\n  }\n\n  /**\n   * Register a command with the Controller by Notification name\n   * @param {string} notificationName\n   *  The name of the Notification to associate the command with\n   * @param {Function} commandClassRef\n   *  A reference ot the commands constructor.\n   * @return {void}\n   */\n  registerCommand (notificationName, commandClassRef) {\n    this.controller.registerCommand(notificationName, commandClassRef)\n  }\n\n  /**\n   * Remove a previously registered command to Notification mapping from the\n   * {@link puremvc.Controller#removeCommand Controller}\n   * @param {string} notificationName\n   *  The name of the the Notification to remove from the command mapping for.\n   * @return {void}\n   */\n  removeCommand (notificationName) {\n    this.controller.removeCommand(notificationName)\n  }\n\n  /**\n   * Check if a command is registered for a given notification.\n   *\n   * @param {string} notificationName\n   *  A Notification name\n   * @return {boolean}\n   *  Whether a comman is currently registered for the given notificationName\n   */\n  hasCommand (notificationName) {\n    return this.controller.hasCommand(notificationName)\n  }\n\n  /**\n   * Register a Proxy with the {@link puremvc.Model#registerProxy Model}\n   * by name.\n   *\n   * @param {puremvc.Proxy} proxy\n   *  The Proxy instance to be registered with the Model.\n   * @return {void}\n   */\n  registerProxy (proxy) {\n    this.model.registerProxy(proxy)\n  }\n\n  /**\n   * Retrieve a Proxy from the Model\n   *\n   * @param {string} proxyName\n   * @return {puremvc.Proxy}\n   */\n  retrieveProxy (proxyName) {\n    return this.model.retrieveProxy(proxyName)\n  }\n\n  /**\n   * Remove a Proxy from the Model by name\n   * @param {string} proxyName\n   *  The name of the Proxy\n   * @return {puremvc.Proxy}\n   *  The Proxy that was removed from the Model\n   */\n  removeProxy (proxyName) {\n    if (this.model) {\n      return this.model.removeProxy(proxyName)\n    }\n    return null\n  }\n\n  /**\n   * Check it a Proxy is registered.\n   * @param {string} proxyName\n   *  A Proxy name\n   * @return {boolean}\n   *  Whether a Proxy is currently registered with the given proxyName\n   */\n  hasProxy (proxyName) {\n    return this.model.hasProxy(proxyName)\n  }\n\n  /**\n   * Register a Mediator with with the View.\n   *\n   * @param {puremvc.Mediator} mediator\n   *  A reference to the Mediator to register\n   * @return {void}\n   */\n  registerMediator (mediator) {\n    this.view.registerMediator(mediator)\n  }\n\n  /**\n   * Retrieve a Mediator from the View by name\n   *\n   * @param {string} mediatorName\n   *  The Mediators name\n   * @return {puremvc.Mediator}\n   *  The retrieved Mediator\n   */\n  retrieveMediator (mediatorName) {\n    return this.view.retrieveMediator(mediatorName)\n  }\n\n  /**\n   * Remove a Mediator from the View.\n   *\n   * @param {string} mediatorName\n   *  The name of the Mediator to remove.\n   * @return {puremvc.Mediator}\n   *  The removed Mediator\n   */\n  removeMediator (mediatorName) {\n    return this.view.removeMediator(mediatorName)\n  }\n\n  /**\n   * Check if a Mediator is registered or not.\n   *\n   * @param {string} mediatorName\n   *  A Mediator name\n   * @return {boolean}\n   *  Whether a Mediator is registered with the given mediatorName\n   */\n  hasMediator (mediatorName) {\n    return this.view.hasMediator(mediatorName)\n  }\n\n  /**\n   * Create and send a\n   * {@link puremvc.Notification Notification}\n   *\n   * Keeps us from having to construct new Notification instances in our\n   * implementation\n   *\n   * @param {string} notificationName\n   *  The name of the Notification to send\n   * @param {Object} [body]\n   *  The body of the notification\n   * @param {string} [type]\n   *  The type of the notification\n   * @return {void}\n   */\n  sendNotification (notificationName, body, type) {\n    this.notifyObservers(new Notification(notificationName, body, type))\n  }\n\n  /**\n   * Notify {@link puremvc.Observer Observer}s\n   *\n   * This method is left public mostly for backward compatibility, and to allow\n   * you to send custom notification classes using the facade.\n   *\n   * Usually you should just call sendNotification and pass the parameters, never\n   * having to construct the notification yourself.\n   *\n   * @param {puremvc.Notification} notification\n   *  The Notification to send\n   * @return {void}\n   */\n  notifyObservers (notification) {\n    this.view.notifyObservers(notification)\n  }\n\n  /**\n   * Initialize the Facades Notifier capabilities by setting the Multiton key for\n   * this facade instance.\n   *\n   * Not called directly, but instead from the constructor when #getInstance is\n   * invoked. It is necessary to be public in order to implement Notifier\n   *\n   * @param {string} key\n   * @return {void}\n   */\n  initializeNotifier (key) {\n    this.multitonKey = key\n  }\n\n  /**\n   * Check if a *Core* is registered or not\n   *\n   * @static\n   * @param {string} key\n   *  The multiton key for the *Core* in question\n   * @return {boolean}\n   *  Whether a *Core* is registered with the given key\n   */\n  static hasCore (key) {\n    return this.instanceMap.has(key)\n  }\n\n  /**\n   * Remove a *Core*\n   *\n   * Remove the Model, View, Controller and Facade for a given key.\n   *\n   * @static\n   * @param {string} key\n   * @return {void}\n   */\n  static removeCore (key) {\n    if (!this.instanceMap.has(key)) { return }\n    Model.removeModel(key)\n    View.removeView(key)\n    Controller.removeController(key)\n    delete this.instanceMap[key]\n  }\n}\n\nconst MULTITON_MSG = 'Facade instance for this Multiton key already constructed!'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/facade/Facade.js","/**\n * Created by sargis on 7/4/17.\n */\n/**\n * A base Notification implementation.\n *\n * PureMVC does not rely upon underlying event models such as the one provided\n * with the DOM or other browser centric W3C event models.\n *\n * The Observer Pattern as implemented within PureMVC exists to support\n * event-driven communication between the application and the actors of the MVC\n * triad.\n *\n * Notifications are not meant to be a replacement for events in the browser.\n * Generally, Mediator implementors place event listeners on their view\n * components, which they then handle in the usual way. This may lead to the\n * broadcast of Notifications to trigger commands or to communicate with other\n * Mediators. {@link puremvc.Proxy Proxy},\n * {@link puremvc.SimpleCommand SimpleCommand}\n * and {@link puremvc.MacroCommand MacroCommand}\n * instances communicate with each other and\n * {@link puremvc.Mediator Mediator}s\n * by broadcasting Notifications.\n *\n * A key difference between browser events and PureMVC Notifications is that\n * events follow the 'Chain of Responsibility' pattern, 'bubbling' up the\n * display hierarchy until some parent component handles the event, while\n * PureMVC Notification follow a 'Publish/Subscribe' pattern. PureMVC classes\n * need not be related to each other in a parent/child relationship in order to\n * communicate with one another using Notifications.\n *\n * @constructor\n * @param {string} name\n *  The Notification name\n * @param {Object} [body]\n *  The Notification body\n * @param {Object} [type]\n *  The Notification type\n */\nexport default class Notification {\n  constructor (name, body, type) {\n    this.name = name\n    this.body = body\n    this.type = type\n  }\n\n  /**\n   * Get the name of the Notification instance\n   *\n   * @return {string}\n   *  The name of the Notification instance\n   */\n  getName () {\n    return this.name\n  }\n\n  /**\n   * Set this Notifications body.\n   * @param {Object} body\n   * @return {void}\n   */\n  setBody (body) {\n    this.body = body\n  }\n\n  /**\n   * Get the Notification body.\n   *\n   * @return {Object}\n   */\n  getBody () {\n    return this.body\n  }\n\n  /**\n   * Set the type of the Notification instance.\n   *\n   * @param {Object} type\n   * @return {void}\n   */\n  setType (type) {\n    this.type = type\n  }\n\n  /**\n   * Get the type of the Notification instance.\n   *\n   * @return {Object}\n   */\n  getType () {\n    return this.type\n  }\n\n  /**\n   * Get a string representation of the Notification instance\n   *\n   * @return {string}\n   */\n  toString () {\n    let msg = 'Notification Name: ' + this.getName()\n    msg += '\\nBody:' + (this.body ? 'null' : this.body.toString())\n    msg += '\\nType:' + (this.type ? 'null' : this.type)\n    return msg\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/observer/Notification.js","import Controller from './com/koreez/puremvc/core/Controller'\nimport Model from './com/koreez/puremvc/core/Model'\nimport View from './com/koreez/puremvc/core/View'\nimport MacroCommand from './com/koreez/puremvc/patterns/command/MacroCommand'\nimport SimpleCommand from './com/koreez/puremvc/patterns/command/SimpleCommand'\nimport Facade from './com/koreez/puremvc/patterns/facade/Facade'\nimport Mediator from './com/koreez/puremvc/patterns/mediator/Mediator'\nimport Notification from './com/koreez/puremvc/patterns/observer/Notification'\nimport Notifier from './com/koreez/puremvc/patterns/observer/Notifier'\nimport Observer from './com/koreez/puremvc/patterns/observer/Observer'\nimport Proxy from './com/koreez/puremvc/patterns/proxy/Proxy'\n\nexport {\n  Controller,\n  Model,\n  View,\n  MacroCommand,\n  SimpleCommand,\n  Facade,\n  Mediator,\n  Notification,\n  Notifier,\n  Observer,\n  Proxy\n}\n\nconst PureMVC = {}\nPureMVC.Controller = Controller\nPureMVC.Model = Model\nPureMVC.View = View\nPureMVC.MacroCommand = MacroCommand\nPureMVC.SimpleCommand = SimpleCommand\nPureMVC.Facade = Facade\nPureMVC.Mediator = Mediator\nPureMVC.Notification = Notification\nPureMVC.Notifier = Notifier\nPureMVC.Observer = Observer\nPureMVC.Proxy = Proxy\n\nexport default PureMVC\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * Created by sargis on 7/4/17.\n */\nimport SimpleCommand from './SimpleCommand'\n/**\n * A base command implementation that executes other commands, such as\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or {@link puremvc.MacroCommand MacroCommand}\n * subclasses.\n *\n * A MacroCommand maintains an list of\n * command constructor references called *SubCommands*.\n *\n * When #execute is called, the MacroCommand\n * instantiates and calls #execute on each of its *SubCommands* in turn.\n * Each *SubCommand* will be passed a reference to the original\n * {@link puremvc.Notification Notification}\n * that was passed to the MacroCommands #execute method\n *\n * Unlike {@link puremvc.SimpleCommand SimpleCommand},\n * your subclass should not override #execute but instead, should\n * override the #initializeMacroCommand method, calling #addSubCommand once for\n * each *SubCommand* to be executed.\n *\n * If your subclass does define a constructor, be sure to call \"super\"\n *\n * @constructor\n */\nexport default class MacroCommand extends SimpleCommand {\n  constructor () {\n    super()\n    this.subCommands = []\n    this.initializeMacroCommand()\n  }\n\n  /**\n   * @protected\n   * Initialize the MacroCommand.\n   *\n   * In your subclass, override this method to\n   * initialize the MacroCommand's *SubCommand*\n   * list with command class references\n   *\n   * Note that *SubCommand*s may be any command implementor,\n   * MacroCommands or SimpleCommands are both acceptable.\n   * @return {void}\n   */\n  initializeMacroCommand () {}\n\n  /**\n   * @protected\n   * Add a *SubCommand*\n   *\n   * The *SubCommand*s will be called in First In / First Out (FIFO) order\n   * @param {Function} commandClassRef\n   *  A reference to a subclassed SimpleCommand or MacroCommand constructor\n   */\n  addSubCommand (subCommand) {\n    this.subCommands.push(subCommand)\n  }\n\n  /**\n   * Execute this MacroCommands *SubCommands*\n   *\n   * The *SubCommand*s will be called in First In / First Out (FIFO) order\n   * @param {puremvc.Notification} note\n   *  The Notification object to be passed to each *SubCommand*\n   */\n  execute (note) {\n    while (this.subCommands.length > 0) {\n      const ref = this.subCommands.shift()\n      // eslint-disable-next-line new-cap\n      const cmd = new ref()\n      cmd.initializeNotifier(this.multitonKey)\n      cmd.execute(note)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/command/MacroCommand.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n/**\n * A base Mediator implementation.\n *\n * In PureMVC, Mediator classes are used to mediate communication between a view\n * component and the rest of the application.\n *\n * A Mediator should listen to its view components for events, and handle them\n * by sending notifications (to be handled by other Mediators,\n * {@link puremvc.SimpleCommand SimpleCommands}\n * or\n * {@link puremvc.MacroCommand MacroCommands})\n * or passing data from the view component directly to a\n * {@link puremvc.Proxy Proxy}, such as submitting\n * the contents of a form to a service.\n *\n * Mediators should not perform business logic, maintain state or other\n * information for its view component, or break the encapsulation of the view\n * component by manipulating the view component's children. It should only call\n * methods or set properties on the view component.\n *\n * The view component should encapsulate its own behavior and implementation by\n * exposing methods and properties that the Mediator can call without having to\n * know about the view component's children.\n *\n * @constructor\n * @param {string} [mediatorName]\n *  The Mediators name. The Mediators static #NAME value is used by default\n * @param {Object} [viewComponent]\n *  The Mediators {@link #setViewComponent viewComponent}.\n */\nexport default class Mediator extends Notifier {\n  constructor (mediatorName, viewComponent) {\n    super()\n    this.mediatorName = mediatorName || NAME\n    this.viewComponent = viewComponent\n  }\n\n  /**\n   * Get the name of the Mediator\n   *\n   * @return {string}\n   *  The Mediator name\n   */\n  getMediatorName () {\n    return this.mediatorName\n  }\n\n  /**\n   * Set the Mediators view component. This could\n   * be a HTMLElement, a bespoke UiComponent wrapper\n   * class, a MooTools Element, a jQuery result or a\n   * css selector, depending on which DOM abstraction\n   * library you are using.\n   *\n   *\n   * @param {Object} the view component\n   * @return {void}\n   */\n  setViewComponent (viewComponent) {\n    this.viewComponent = viewComponent\n  }\n\n  /**\n   * Get the Mediators view component.\n   *\n   * Additionally, an optional explicit getter can be\n   * be defined in the subclass that defines the\n   * view components, providing a more semantic interface\n   * to the Mediator.\n   *\n   * This is different from the AS3 implementation in\n   * the sense that no casting is required from the\n   * object supplied as the view component.\n   *\n   * @return {Object}\n   *  The view component\n   */\n  getViewComponent () {\n    return this.viewComponent\n  }\n\n  /**\n   * List the Notification names this Mediator is interested\n   * in being notified of.\n   *\n   * @return {Array}\n   *  The list of Notification names.\n   */\n  listNotificationInterests () {\n    return []\n  }\n\n  /**\n   * Handle Notifications.\n   *\n   * Typically this will be handled in a switch statement\n   * with one 'case' entry per Notification the Mediator\n   * is interested in\n   *\n   * @param {puremvc.Notification} notification\n   * @return {void}\n   */\n  handleNotification (notification) {\n  }\n\n  /**\n   * Called by the View when the Mediator is registered\n   * @return {void}\n   */\n  onRegister () {\n  }\n\n  /**\n   * Called by the View when the Mediator is removed\n   */\n  onRemove () {\n  }\n}\n\nconst NAME = 'Mediator'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/mediator/Mediator.js","/**\n * Created by sargis on 7/4/17.\n */\nimport Notifier from '../observer/Notifier'\n\n/**\n * A base Proxy implementation.\n *\n * In PureMVC, Proxy classes are used to manage parts of the application's data\n * model.\n *\n * A Proxy might simply manage a reference to a local data object, in which case\n * interacting with it might involve setting and getting of its data in\n * synchronous fashion.\n *\n * Proxy classes are also used to encapsulate the application's interaction with\n * remote services to save or retrieve data, in which case, we adopt an\n * asyncronous idiom; setting data (or calling a method) on the Proxy and\n * listening for a\n * {@link puremvc.Notification Notification}\n * to be sent  when the Proxy has retrieved the data from the service.\n *\n *\n * @param {string} [proxyName]\n *  The Proxy's name. If none is provided, the Proxy will use its constructors\n *  NAME property.\n * @param {Object} [data]\n *  The Proxy's data object\n * @constructor\n */\nexport default class Proxy extends Notifier {\n  constructor (proxyName, data) {\n    super()\n    this.proxyName = proxyName || NAME\n    if (data) {\n      this.setData(data)\n    }\n  }\n\n  /**\n   * Get the Proxy's name.\n   *\n   * @return {string}\n   */\n  getProxyName () {\n    return this.proxyName\n  }\n\n  /**\n   * Set the Proxy's data object\n   *\n   * @param {Object} data\n   * @return {void}\n   */\n  setData (data) {\n    this.data = data\n  }\n\n  /**\n   * Get the Proxy's data object\n   *\n   * @return {Object}\n   */\n  getData () {\n    return this.data\n  }\n\n  /**\n   * Called by the {@link puremvc.Model Model} when\n   * the Proxy is registered.\n   *\n   * @return {void}\n   */\n  onRegister () {\n\n  }\n\n  /**\n   * Called by the {@link puremvc.Model Model} when\n   * the Proxy is removed.\n   *\n   * @return {void}\n   */\n  onRemove () {\n  }\n}\n\nconst NAME = 'Proxy'\n\n\n\n// WEBPACK FOOTER //\n// ./src/com/koreez/puremvc/patterns/proxy/Proxy.js"],"sourceRoot":""}